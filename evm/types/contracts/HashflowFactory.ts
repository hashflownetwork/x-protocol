/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HashflowFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_poolImpl"
      | "acceptOwnership"
      | "allowedPoolCreators"
      | "createPool"
      | "initialize"
      | "owner"
      | "pendingOwner"
      | "renounceOwnership"
      | "router"
      | "transferOwnership"
      | "updatePoolCreatorAuthorization"
      | "updatePoolImpl"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CreatePool"
      | "Initialized"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "UpdatePoolCreatorAuthorization"
      | "UpdatePoolImplementation"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_poolImpl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedPoolCreators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolCreatorAuthorization",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolImpl",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "_poolImpl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedPoolCreators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolCreatorAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolImpl",
    data: BytesLike
  ): Result;
}

export namespace CreatePoolEvent {
  export type InputTuple = [pool: AddressLike, operations: AddressLike];
  export type OutputTuple = [pool: string, operations: string];
  export interface OutputObject {
    pool: string;
    operations: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatePoolCreatorAuthorizationEvent {
  export type InputTuple = [
    poolCreator: AddressLike,
    authorizationStatus: boolean
  ];
  export type OutputTuple = [poolCreator: string, authorizationStatus: boolean];
  export interface OutputObject {
    poolCreator: string;
    authorizationStatus: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatePoolImplementationEvent {
  export type InputTuple = [poolImpl: AddressLike, prevPoolImpl: AddressLike];
  export type OutputTuple = [poolImpl: string, prevPoolImpl: string];
  export interface OutputObject {
    poolImpl: string;
    prevPoolImpl: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HashflowFactory extends BaseContract {
  connect(runner?: ContractRunner | null): HashflowFactory;
  waitForDeployment(): Promise<this>;

  interface: HashflowFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _poolImpl: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  allowedPoolCreators: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  createPool: TypedContractMethod<
    [name: string, signer: AddressLike],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<[_router: AddressLike], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "view">;

  router: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePoolCreatorAuthorization: TypedContractMethod<
    [poolCreator: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  updatePoolImpl: TypedContractMethod<
    [poolImpl: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_poolImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowedPoolCreators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createPool"
  ): TypedContractMethod<
    [name: string, signer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_router: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePoolCreatorAuthorization"
  ): TypedContractMethod<
    [poolCreator: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePoolImpl"
  ): TypedContractMethod<[poolImpl: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CreatePool"
  ): TypedContractEvent<
    CreatePoolEvent.InputTuple,
    CreatePoolEvent.OutputTuple,
    CreatePoolEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UpdatePoolCreatorAuthorization"
  ): TypedContractEvent<
    UpdatePoolCreatorAuthorizationEvent.InputTuple,
    UpdatePoolCreatorAuthorizationEvent.OutputTuple,
    UpdatePoolCreatorAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "UpdatePoolImplementation"
  ): TypedContractEvent<
    UpdatePoolImplementationEvent.InputTuple,
    UpdatePoolImplementationEvent.OutputTuple,
    UpdatePoolImplementationEvent.OutputObject
  >;

  filters: {
    "CreatePool(address,address)": TypedContractEvent<
      CreatePoolEvent.InputTuple,
      CreatePoolEvent.OutputTuple,
      CreatePoolEvent.OutputObject
    >;
    CreatePool: TypedContractEvent<
      CreatePoolEvent.InputTuple,
      CreatePoolEvent.OutputTuple,
      CreatePoolEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UpdatePoolCreatorAuthorization(address,bool)": TypedContractEvent<
      UpdatePoolCreatorAuthorizationEvent.InputTuple,
      UpdatePoolCreatorAuthorizationEvent.OutputTuple,
      UpdatePoolCreatorAuthorizationEvent.OutputObject
    >;
    UpdatePoolCreatorAuthorization: TypedContractEvent<
      UpdatePoolCreatorAuthorizationEvent.InputTuple,
      UpdatePoolCreatorAuthorizationEvent.OutputTuple,
      UpdatePoolCreatorAuthorizationEvent.OutputObject
    >;

    "UpdatePoolImplementation(address,address)": TypedContractEvent<
      UpdatePoolImplementationEvent.InputTuple,
      UpdatePoolImplementationEvent.OutputTuple,
      UpdatePoolImplementationEvent.OutputObject
    >;
    UpdatePoolImplementation: TypedContractEvent<
      UpdatePoolImplementationEvent.InputTuple,
      UpdatePoolImplementationEvent.OutputTuple,
      UpdatePoolImplementationEvent.OutputObject
    >;
  };
}
