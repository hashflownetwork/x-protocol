/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IHashflowAavePortal {
  export type XChainQuoteStruct = {
    srcChainId: BigNumberish;
    dstChainId: BigNumberish;
    srcPool: AddressLike;
    dstPool: BytesLike;
    srcExternalAccount: AddressLike;
    dstExternalAccount: BytesLike;
    dstTrader: BytesLike;
    baseToken: AddressLike;
    quoteToken: BytesLike;
    baseTokenAmount: BigNumberish;
    quoteTokenAmount: BigNumberish;
    quoteExpiry: BigNumberish;
    nonce: BigNumberish;
    txid: BytesLike;
    xChainMessenger: AddressLike;
    signature: BytesLike;
  };

  export type XChainQuoteStructOutput = [
    srcChainId: bigint,
    dstChainId: bigint,
    srcPool: string,
    dstPool: string,
    srcExternalAccount: string,
    dstExternalAccount: string,
    dstTrader: string,
    baseToken: string,
    quoteToken: string,
    baseTokenAmount: bigint,
    quoteTokenAmount: bigint,
    quoteExpiry: bigint,
    nonce: bigint,
    txid: string,
    xChainMessenger: string,
    signature: string
  ] & {
    srcChainId: bigint;
    dstChainId: bigint;
    srcPool: string;
    dstPool: string;
    srcExternalAccount: string;
    dstExternalAccount: string;
    dstTrader: string;
    baseToken: string;
    quoteToken: string;
    baseTokenAmount: bigint;
    quoteTokenAmount: bigint;
    quoteExpiry: bigint;
    nonce: bigint;
    txid: string;
    xChainMessenger: string;
    signature: string;
  };
}

export interface IHashflowAavePortalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "aavePool"
      | "freeze"
      | "frozen"
      | "hashflowRouter"
      | "killswitch"
      | "receiveAssetPosition"
      | "transferAssetPosition"
      | "updateKillswitch"
      | "updateRemotePortal"
      | "wormholeMessenger"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Freeze"
      | "ReceiveAssetPosition"
      | "TransferAssetPosition"
      | "UpdateKillswitch"
      | "UpdateRemotePortal"
  ): EventFragment;

  encodeFunctionData(functionFragment: "aavePool", values?: undefined): string;
  encodeFunctionData(functionFragment: "freeze", values?: undefined): string;
  encodeFunctionData(functionFragment: "frozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hashflowRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "killswitch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveAssetPosition",
    values: [AddressLike, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAssetPosition",
    values: [IHashflowAavePortal.XChainQuoteStruct, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKillswitch",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRemotePortal",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wormholeMessenger",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "aavePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashflowRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "killswitch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveAssetPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAssetPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKillswitch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRemotePortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wormholeMessenger",
    data: BytesLike
  ): Result;
}

export namespace FreezeEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiveAssetPositionEvent {
  export type InputTuple = [
    asset: AddressLike,
    aToken: AddressLike,
    amount: BigNumberish,
    target: AddressLike,
    txid: BytesLike
  ];
  export type OutputTuple = [
    asset: string,
    aToken: string,
    amount: bigint,
    target: string,
    txid: string
  ];
  export interface OutputObject {
    asset: string;
    aToken: string;
    amount: bigint;
    target: string;
    txid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferAssetPositionEvent {
  export type InputTuple = [
    asset: AddressLike,
    aToken: AddressLike,
    amount: BigNumberish,
    dstHashflowChainId: BigNumberish,
    dstAsset: AddressLike,
    dstAmount: BigNumberish,
    target: AddressLike,
    txid: BytesLike,
    dstContract: BytesLike,
    dstCalldata: BytesLike
  ];
  export type OutputTuple = [
    asset: string,
    aToken: string,
    amount: bigint,
    dstHashflowChainId: bigint,
    dstAsset: string,
    dstAmount: bigint,
    target: string,
    txid: string,
    dstContract: string,
    dstCalldata: string
  ];
  export interface OutputObject {
    asset: string;
    aToken: string;
    amount: bigint;
    dstHashflowChainId: bigint;
    dstAsset: string;
    dstAmount: bigint;
    target: string;
    txid: string;
    dstContract: string;
    dstCalldata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateKillswitchEvent {
  export type InputTuple = [killswitch: boolean];
  export type OutputTuple = [killswitch: boolean];
  export interface OutputObject {
    killswitch: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateRemotePortalEvent {
  export type InputTuple = [hashflowChainId: BigNumberish, portal: AddressLike];
  export type OutputTuple = [hashflowChainId: bigint, portal: string];
  export interface OutputObject {
    hashflowChainId: bigint;
    portal: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IHashflowAavePortal extends BaseContract {
  connect(runner?: ContractRunner | null): IHashflowAavePortal;
  waitForDeployment(): Promise<this>;

  interface: IHashflowAavePortalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  aavePool: TypedContractMethod<[], [string], "nonpayable">;

  freeze: TypedContractMethod<[], [void], "nonpayable">;

  frozen: TypedContractMethod<[], [boolean], "nonpayable">;

  hashflowRouter: TypedContractMethod<[], [string], "nonpayable">;

  killswitch: TypedContractMethod<[], [boolean], "nonpayable">;

  receiveAssetPosition: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      onBehalfOf: AddressLike,
      txid: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  transferAssetPosition: TypedContractMethod<
    [
      quote: IHashflowAavePortal.XChainQuoteStruct,
      underlyingAssetAmount: BigNumberish,
      target: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  updateKillswitch: TypedContractMethod<
    [killswitch: boolean],
    [void],
    "nonpayable"
  >;

  updateRemotePortal: TypedContractMethod<
    [hashflowChainId: BigNumberish, portal: AddressLike],
    [void],
    "nonpayable"
  >;

  wormholeMessenger: TypedContractMethod<[], [string], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "aavePool"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "freeze"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "frozen"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "hashflowRouter"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "killswitch"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "receiveAssetPosition"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      onBehalfOf: AddressLike,
      txid: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferAssetPosition"
  ): TypedContractMethod<
    [
      quote: IHashflowAavePortal.XChainQuoteStruct,
      underlyingAssetAmount: BigNumberish,
      target: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateKillswitch"
  ): TypedContractMethod<[killswitch: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRemotePortal"
  ): TypedContractMethod<
    [hashflowChainId: BigNumberish, portal: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wormholeMessenger"
  ): TypedContractMethod<[], [string], "nonpayable">;

  getEvent(
    key: "Freeze"
  ): TypedContractEvent<
    FreezeEvent.InputTuple,
    FreezeEvent.OutputTuple,
    FreezeEvent.OutputObject
  >;
  getEvent(
    key: "ReceiveAssetPosition"
  ): TypedContractEvent<
    ReceiveAssetPositionEvent.InputTuple,
    ReceiveAssetPositionEvent.OutputTuple,
    ReceiveAssetPositionEvent.OutputObject
  >;
  getEvent(
    key: "TransferAssetPosition"
  ): TypedContractEvent<
    TransferAssetPositionEvent.InputTuple,
    TransferAssetPositionEvent.OutputTuple,
    TransferAssetPositionEvent.OutputObject
  >;
  getEvent(
    key: "UpdateKillswitch"
  ): TypedContractEvent<
    UpdateKillswitchEvent.InputTuple,
    UpdateKillswitchEvent.OutputTuple,
    UpdateKillswitchEvent.OutputObject
  >;
  getEvent(
    key: "UpdateRemotePortal"
  ): TypedContractEvent<
    UpdateRemotePortalEvent.InputTuple,
    UpdateRemotePortalEvent.OutputTuple,
    UpdateRemotePortalEvent.OutputObject
  >;

  filters: {
    "Freeze()": TypedContractEvent<
      FreezeEvent.InputTuple,
      FreezeEvent.OutputTuple,
      FreezeEvent.OutputObject
    >;
    Freeze: TypedContractEvent<
      FreezeEvent.InputTuple,
      FreezeEvent.OutputTuple,
      FreezeEvent.OutputObject
    >;

    "ReceiveAssetPosition(address,address,uint256,address,bytes32)": TypedContractEvent<
      ReceiveAssetPositionEvent.InputTuple,
      ReceiveAssetPositionEvent.OutputTuple,
      ReceiveAssetPositionEvent.OutputObject
    >;
    ReceiveAssetPosition: TypedContractEvent<
      ReceiveAssetPositionEvent.InputTuple,
      ReceiveAssetPositionEvent.OutputTuple,
      ReceiveAssetPositionEvent.OutputObject
    >;

    "TransferAssetPosition(address,address,uint256,uint16,address,uint256,address,bytes32,bytes32,bytes)": TypedContractEvent<
      TransferAssetPositionEvent.InputTuple,
      TransferAssetPositionEvent.OutputTuple,
      TransferAssetPositionEvent.OutputObject
    >;
    TransferAssetPosition: TypedContractEvent<
      TransferAssetPositionEvent.InputTuple,
      TransferAssetPositionEvent.OutputTuple,
      TransferAssetPositionEvent.OutputObject
    >;

    "UpdateKillswitch(bool)": TypedContractEvent<
      UpdateKillswitchEvent.InputTuple,
      UpdateKillswitchEvent.OutputTuple,
      UpdateKillswitchEvent.OutputObject
    >;
    UpdateKillswitch: TypedContractEvent<
      UpdateKillswitchEvent.InputTuple,
      UpdateKillswitchEvent.OutputTuple,
      UpdateKillswitchEvent.OutputObject
    >;

    "UpdateRemotePortal(uint16,address)": TypedContractEvent<
      UpdateRemotePortalEvent.InputTuple,
      UpdateRemotePortalEvent.OutputTuple,
      UpdateRemotePortalEvent.OutputObject
    >;
    UpdateRemotePortal: TypedContractEvent<
      UpdateRemotePortalEvent.InputTuple,
      UpdateRemotePortalEvent.OutputTuple,
      UpdateRemotePortalEvent.OutputObject
    >;
  };
}
