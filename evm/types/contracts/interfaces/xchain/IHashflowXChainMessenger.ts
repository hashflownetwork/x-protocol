/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IHashflowXChainMessenger {
  export type XChainQuoteStruct = {
    srcChainId: BigNumberish;
    dstChainId: BigNumberish;
    srcPool: AddressLike;
    dstPool: BytesLike;
    srcExternalAccount: AddressLike;
    dstExternalAccount: BytesLike;
    trader: AddressLike;
    dstTrader: BytesLike;
    baseToken: AddressLike;
    quoteToken: BytesLike;
    baseTokenAmount: BigNumberish;
    quoteTokenAmount: BigNumberish;
    txid: BytesLike;
  };

  export type XChainQuoteStructOutput = [
    srcChainId: bigint,
    dstChainId: bigint,
    srcPool: string,
    dstPool: string,
    srcExternalAccount: string,
    dstExternalAccount: string,
    trader: string,
    dstTrader: string,
    baseToken: string,
    quoteToken: string,
    baseTokenAmount: bigint,
    quoteTokenAmount: bigint,
    txid: string
  ] & {
    srcChainId: bigint;
    dstChainId: bigint;
    srcPool: string;
    dstPool: string;
    srcExternalAccount: string;
    dstExternalAccount: string;
    trader: string;
    dstTrader: string;
    baseToken: string;
    quoteToken: string;
    baseTokenAmount: bigint;
    quoteTokenAmount: bigint;
    txid: string;
  };
}

export interface IHashflowXChainMessengerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "hChainId"
      | "router"
      | "tradeXChain"
      | "updateXChainRemoteAddress"
      | "withdrawFunds"
      | "xChainRemotes"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "UpdateXChainRemoteAddress"): EventFragment;

  encodeFunctionData(functionFragment: "hChainId", values?: undefined): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tradeXChain",
    values: [
      IHashflowXChainMessenger.XChainQuoteStruct,
      AddressLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateXChainRemoteAddress",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "xChainRemotes",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "hChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tradeXChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateXChainRemoteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xChainRemotes",
    data: BytesLike
  ): Result;
}

export namespace UpdateXChainRemoteAddressEvent {
  export type InputTuple = [chainId: BigNumberish, remoteAddress: BytesLike];
  export type OutputTuple = [chainId: bigint, remoteAddress: string];
  export interface OutputObject {
    chainId: bigint;
    remoteAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IHashflowXChainMessenger extends BaseContract {
  connect(runner?: ContractRunner | null): IHashflowXChainMessenger;
  waitForDeployment(): Promise<this>;

  interface: IHashflowXChainMessengerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  hChainId: TypedContractMethod<[], [bigint], "view">;

  router: TypedContractMethod<[], [string], "view">;

  tradeXChain: TypedContractMethod<
    [
      xChainQuote: IHashflowXChainMessenger.XChainQuoteStruct,
      caller: AddressLike,
      dstContract: BytesLike,
      dstCalldata: BytesLike
    ],
    [void],
    "payable"
  >;

  updateXChainRemoteAddress: TypedContractMethod<
    [hChainId: BigNumberish, remoteAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<[], [void], "nonpayable">;

  xChainRemotes: TypedContractMethod<
    [hChainId: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "hChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tradeXChain"
  ): TypedContractMethod<
    [
      xChainQuote: IHashflowXChainMessenger.XChainQuoteStruct,
      caller: AddressLike,
      dstContract: BytesLike,
      dstCalldata: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "updateXChainRemoteAddress"
  ): TypedContractMethod<
    [hChainId: BigNumberish, remoteAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "xChainRemotes"
  ): TypedContractMethod<[hChainId: BigNumberish], [string], "view">;

  getEvent(
    key: "UpdateXChainRemoteAddress"
  ): TypedContractEvent<
    UpdateXChainRemoteAddressEvent.InputTuple,
    UpdateXChainRemoteAddressEvent.OutputTuple,
    UpdateXChainRemoteAddressEvent.OutputObject
  >;

  filters: {
    "UpdateXChainRemoteAddress(uint16,bytes)": TypedContractEvent<
      UpdateXChainRemoteAddressEvent.InputTuple,
      UpdateXChainRemoteAddressEvent.OutputTuple,
      UpdateXChainRemoteAddressEvent.OutputObject
    >;
    UpdateXChainRemoteAddress: TypedContractEvent<
      UpdateXChainRemoteAddressEvent.InputTuple,
      UpdateXChainRemoteAddressEvent.OutputTuple,
      UpdateXChainRemoteAddressEvent.OutputObject
    >;
  };
}
