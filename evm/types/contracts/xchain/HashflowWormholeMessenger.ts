/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IHashflowXChainMessenger {
  export type XChainQuoteStruct = {
    srcChainId: BigNumberish;
    dstChainId: BigNumberish;
    srcPool: AddressLike;
    dstPool: BytesLike;
    srcExternalAccount: AddressLike;
    dstExternalAccount: BytesLike;
    trader: AddressLike;
    dstTrader: BytesLike;
    baseToken: AddressLike;
    quoteToken: BytesLike;
    baseTokenAmount: BigNumberish;
    quoteTokenAmount: BigNumberish;
    txid: BytesLike;
  };

  export type XChainQuoteStructOutput = [
    srcChainId: bigint,
    dstChainId: bigint,
    srcPool: string,
    dstPool: string,
    srcExternalAccount: string,
    dstExternalAccount: string,
    trader: string,
    dstTrader: string,
    baseToken: string,
    quoteToken: string,
    baseTokenAmount: bigint,
    quoteTokenAmount: bigint,
    txid: string
  ] & {
    srcChainId: bigint;
    dstChainId: bigint;
    srcPool: string;
    dstPool: string;
    srcExternalAccount: string;
    dstExternalAccount: string;
    trader: string;
    dstTrader: string;
    baseToken: string;
    quoteToken: string;
    baseTokenAmount: bigint;
    quoteTokenAmount: bigint;
    txid: string;
  };
}

export interface HashflowWormholeMessengerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "hChainId"
      | "hChainIdToWormholeChainId"
      | "owner"
      | "pendingOwner"
      | "permissionedRelayers"
      | "renounceOwnership"
      | "router"
      | "tradeXChain"
      | "transferOwnership"
      | "updatePermissionedRelayer"
      | "updateWormhole"
      | "updateWormholeChainIdForHashflowChainId"
      | "updateWormholeConsistencyLevel"
      | "updateWormholeConsistencyLevelFast"
      | "updateXChainRemoteAddress"
      | "withdrawFunds"
      | "wormholeChainIdToHChainId"
      | "wormholeConsistencyLevel"
      | "wormholeConsistencyLevelFast"
      | "wormholeEndpoint"
      | "wormholeReceive"
      | "xChainRemotes"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "UpdatePermissionedRelayer"
      | "UpdateWormholeChainId"
      | "UpdateWormholeConsistencyLevel"
      | "UpdateWormholeConsistencyLevelFast"
      | "UpdateWormholeEndpoint"
      | "UpdateXChainRemoteAddress"
      | "WormholeReceive"
      | "WormholeSend"
      | "WormholeSendFast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hChainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hChainIdToWormholeChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permissionedRelayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tradeXChain",
    values: [
      IHashflowXChainMessenger.XChainQuoteStruct,
      AddressLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePermissionedRelayer",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWormhole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWormholeChainIdForHashflowChainId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWormholeConsistencyLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWormholeConsistencyLevelFast",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateXChainRemoteAddress",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wormholeChainIdToHChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wormholeConsistencyLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wormholeConsistencyLevelFast",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wormholeEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wormholeReceive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xChainRemotes",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hChainIdToWormholeChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionedRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tradeXChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePermissionedRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWormhole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWormholeChainIdForHashflowChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWormholeConsistencyLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWormholeConsistencyLevelFast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateXChainRemoteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wormholeChainIdToHChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wormholeConsistencyLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wormholeConsistencyLevelFast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wormholeEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wormholeReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xChainRemotes",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatePermissionedRelayerEvent {
  export type InputTuple = [hChainId: BigNumberish, relayer: BytesLike];
  export type OutputTuple = [hChainId: bigint, relayer: string];
  export interface OutputObject {
    hChainId: bigint;
    relayer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateWormholeChainIdEvent {
  export type InputTuple = [
    hChainId: BigNumberish,
    wormholeChainId: BigNumberish
  ];
  export type OutputTuple = [hChainId: bigint, wormholeChainId: bigint];
  export interface OutputObject {
    hChainId: bigint;
    wormholeChainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateWormholeConsistencyLevelEvent {
  export type InputTuple = [consistencyLevel: BigNumberish];
  export type OutputTuple = [consistencyLevel: bigint];
  export interface OutputObject {
    consistencyLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateWormholeConsistencyLevelFastEvent {
  export type InputTuple = [consistencyLevel: BigNumberish];
  export type OutputTuple = [consistencyLevel: bigint];
  export interface OutputObject {
    consistencyLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateWormholeEndpointEvent {
  export type InputTuple = [
    wormholeEndpoint: AddressLike,
    prevWormholeEndpoint: AddressLike
  ];
  export type OutputTuple = [
    wormholeEndpoint: string,
    prevWormholeEndpoint: string
  ];
  export interface OutputObject {
    wormholeEndpoint: string;
    prevWormholeEndpoint: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateXChainRemoteAddressEvent {
  export type InputTuple = [chainId: BigNumberish, remoteAddress: BytesLike];
  export type OutputTuple = [chainId: bigint, remoteAddress: string];
  export interface OutputObject {
    chainId: bigint;
    remoteAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WormholeReceiveEvent {
  export type InputTuple = [txid: BytesLike];
  export type OutputTuple = [txid: string];
  export interface OutputObject {
    txid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WormholeSendEvent {
  export type InputTuple = [
    txid: BytesLike,
    value: BigNumberish,
    sequence: BigNumberish
  ];
  export type OutputTuple = [txid: string, value: bigint, sequence: bigint];
  export interface OutputObject {
    txid: string;
    value: bigint;
    sequence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WormholeSendFastEvent {
  export type InputTuple = [
    txid: BytesLike,
    value: BigNumberish,
    sequence: BigNumberish
  ];
  export type OutputTuple = [txid: string, value: bigint, sequence: bigint];
  export interface OutputObject {
    txid: string;
    value: bigint;
    sequence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HashflowWormholeMessenger extends BaseContract {
  connect(runner?: ContractRunner | null): HashflowWormholeMessenger;
  waitForDeployment(): Promise<this>;

  interface: HashflowWormholeMessengerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  hChainId: TypedContractMethod<[], [bigint], "view">;

  hChainIdToWormholeChainId: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  permissionedRelayers: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "view">;

  router: TypedContractMethod<[], [string], "view">;

  tradeXChain: TypedContractMethod<
    [
      quote: IHashflowXChainMessenger.XChainQuoteStruct,
      caller: AddressLike,
      dstContract: BytesLike,
      dstCalldata: BytesLike
    ],
    [void],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePermissionedRelayer: TypedContractMethod<
    [_hChainId: BigNumberish, relayer: BytesLike],
    [void],
    "nonpayable"
  >;

  updateWormhole: TypedContractMethod<
    [wormhole: AddressLike],
    [void],
    "nonpayable"
  >;

  updateWormholeChainIdForHashflowChainId: TypedContractMethod<
    [hashflowChainId: BigNumberish, wormholeChainId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateWormholeConsistencyLevel: TypedContractMethod<
    [consistencyLevel: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateWormholeConsistencyLevelFast: TypedContractMethod<
    [consistencyLevel: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateXChainRemoteAddress: TypedContractMethod<
    [_hChainId: BigNumberish, remoteAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<[], [void], "nonpayable">;

  wormholeChainIdToHChainId: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  wormholeConsistencyLevel: TypedContractMethod<[], [bigint], "view">;

  wormholeConsistencyLevelFast: TypedContractMethod<[], [bigint], "view">;

  wormholeEndpoint: TypedContractMethod<[], [string], "view">;

  wormholeReceive: TypedContractMethod<
    [encodedVM: BytesLike],
    [void],
    "nonpayable"
  >;

  xChainRemotes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hChainIdToWormholeChainId"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permissionedRelayers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tradeXChain"
  ): TypedContractMethod<
    [
      quote: IHashflowXChainMessenger.XChainQuoteStruct,
      caller: AddressLike,
      dstContract: BytesLike,
      dstCalldata: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePermissionedRelayer"
  ): TypedContractMethod<
    [_hChainId: BigNumberish, relayer: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateWormhole"
  ): TypedContractMethod<[wormhole: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateWormholeChainIdForHashflowChainId"
  ): TypedContractMethod<
    [hashflowChainId: BigNumberish, wormholeChainId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateWormholeConsistencyLevel"
  ): TypedContractMethod<
    [consistencyLevel: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateWormholeConsistencyLevelFast"
  ): TypedContractMethod<
    [consistencyLevel: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateXChainRemoteAddress"
  ): TypedContractMethod<
    [_hChainId: BigNumberish, remoteAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "wormholeChainIdToHChainId"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "wormholeConsistencyLevel"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wormholeConsistencyLevelFast"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wormholeEndpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wormholeReceive"
  ): TypedContractMethod<[encodedVM: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "xChainRemotes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UpdatePermissionedRelayer"
  ): TypedContractEvent<
    UpdatePermissionedRelayerEvent.InputTuple,
    UpdatePermissionedRelayerEvent.OutputTuple,
    UpdatePermissionedRelayerEvent.OutputObject
  >;
  getEvent(
    key: "UpdateWormholeChainId"
  ): TypedContractEvent<
    UpdateWormholeChainIdEvent.InputTuple,
    UpdateWormholeChainIdEvent.OutputTuple,
    UpdateWormholeChainIdEvent.OutputObject
  >;
  getEvent(
    key: "UpdateWormholeConsistencyLevel"
  ): TypedContractEvent<
    UpdateWormholeConsistencyLevelEvent.InputTuple,
    UpdateWormholeConsistencyLevelEvent.OutputTuple,
    UpdateWormholeConsistencyLevelEvent.OutputObject
  >;
  getEvent(
    key: "UpdateWormholeConsistencyLevelFast"
  ): TypedContractEvent<
    UpdateWormholeConsistencyLevelFastEvent.InputTuple,
    UpdateWormholeConsistencyLevelFastEvent.OutputTuple,
    UpdateWormholeConsistencyLevelFastEvent.OutputObject
  >;
  getEvent(
    key: "UpdateWormholeEndpoint"
  ): TypedContractEvent<
    UpdateWormholeEndpointEvent.InputTuple,
    UpdateWormholeEndpointEvent.OutputTuple,
    UpdateWormholeEndpointEvent.OutputObject
  >;
  getEvent(
    key: "UpdateXChainRemoteAddress"
  ): TypedContractEvent<
    UpdateXChainRemoteAddressEvent.InputTuple,
    UpdateXChainRemoteAddressEvent.OutputTuple,
    UpdateXChainRemoteAddressEvent.OutputObject
  >;
  getEvent(
    key: "WormholeReceive"
  ): TypedContractEvent<
    WormholeReceiveEvent.InputTuple,
    WormholeReceiveEvent.OutputTuple,
    WormholeReceiveEvent.OutputObject
  >;
  getEvent(
    key: "WormholeSend"
  ): TypedContractEvent<
    WormholeSendEvent.InputTuple,
    WormholeSendEvent.OutputTuple,
    WormholeSendEvent.OutputObject
  >;
  getEvent(
    key: "WormholeSendFast"
  ): TypedContractEvent<
    WormholeSendFastEvent.InputTuple,
    WormholeSendFastEvent.OutputTuple,
    WormholeSendFastEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UpdatePermissionedRelayer(uint16,bytes32)": TypedContractEvent<
      UpdatePermissionedRelayerEvent.InputTuple,
      UpdatePermissionedRelayerEvent.OutputTuple,
      UpdatePermissionedRelayerEvent.OutputObject
    >;
    UpdatePermissionedRelayer: TypedContractEvent<
      UpdatePermissionedRelayerEvent.InputTuple,
      UpdatePermissionedRelayerEvent.OutputTuple,
      UpdatePermissionedRelayerEvent.OutputObject
    >;

    "UpdateWormholeChainId(uint256,uint256)": TypedContractEvent<
      UpdateWormholeChainIdEvent.InputTuple,
      UpdateWormholeChainIdEvent.OutputTuple,
      UpdateWormholeChainIdEvent.OutputObject
    >;
    UpdateWormholeChainId: TypedContractEvent<
      UpdateWormholeChainIdEvent.InputTuple,
      UpdateWormholeChainIdEvent.OutputTuple,
      UpdateWormholeChainIdEvent.OutputObject
    >;

    "UpdateWormholeConsistencyLevel(uint256)": TypedContractEvent<
      UpdateWormholeConsistencyLevelEvent.InputTuple,
      UpdateWormholeConsistencyLevelEvent.OutputTuple,
      UpdateWormholeConsistencyLevelEvent.OutputObject
    >;
    UpdateWormholeConsistencyLevel: TypedContractEvent<
      UpdateWormholeConsistencyLevelEvent.InputTuple,
      UpdateWormholeConsistencyLevelEvent.OutputTuple,
      UpdateWormholeConsistencyLevelEvent.OutputObject
    >;

    "UpdateWormholeConsistencyLevelFast(uint256)": TypedContractEvent<
      UpdateWormholeConsistencyLevelFastEvent.InputTuple,
      UpdateWormholeConsistencyLevelFastEvent.OutputTuple,
      UpdateWormholeConsistencyLevelFastEvent.OutputObject
    >;
    UpdateWormholeConsistencyLevelFast: TypedContractEvent<
      UpdateWormholeConsistencyLevelFastEvent.InputTuple,
      UpdateWormholeConsistencyLevelFastEvent.OutputTuple,
      UpdateWormholeConsistencyLevelFastEvent.OutputObject
    >;

    "UpdateWormholeEndpoint(address,address)": TypedContractEvent<
      UpdateWormholeEndpointEvent.InputTuple,
      UpdateWormholeEndpointEvent.OutputTuple,
      UpdateWormholeEndpointEvent.OutputObject
    >;
    UpdateWormholeEndpoint: TypedContractEvent<
      UpdateWormholeEndpointEvent.InputTuple,
      UpdateWormholeEndpointEvent.OutputTuple,
      UpdateWormholeEndpointEvent.OutputObject
    >;

    "UpdateXChainRemoteAddress(uint16,bytes)": TypedContractEvent<
      UpdateXChainRemoteAddressEvent.InputTuple,
      UpdateXChainRemoteAddressEvent.OutputTuple,
      UpdateXChainRemoteAddressEvent.OutputObject
    >;
    UpdateXChainRemoteAddress: TypedContractEvent<
      UpdateXChainRemoteAddressEvent.InputTuple,
      UpdateXChainRemoteAddressEvent.OutputTuple,
      UpdateXChainRemoteAddressEvent.OutputObject
    >;

    "WormholeReceive(bytes32)": TypedContractEvent<
      WormholeReceiveEvent.InputTuple,
      WormholeReceiveEvent.OutputTuple,
      WormholeReceiveEvent.OutputObject
    >;
    WormholeReceive: TypedContractEvent<
      WormholeReceiveEvent.InputTuple,
      WormholeReceiveEvent.OutputTuple,
      WormholeReceiveEvent.OutputObject
    >;

    "WormholeSend(bytes32,uint256,uint256)": TypedContractEvent<
      WormholeSendEvent.InputTuple,
      WormholeSendEvent.OutputTuple,
      WormholeSendEvent.OutputObject
    >;
    WormholeSend: TypedContractEvent<
      WormholeSendEvent.InputTuple,
      WormholeSendEvent.OutputTuple,
      WormholeSendEvent.OutputObject
    >;

    "WormholeSendFast(bytes32,uint256,uint256)": TypedContractEvent<
      WormholeSendFastEvent.InputTuple,
      WormholeSendFastEvent.OutputTuple,
      WormholeSendFastEvent.OutputObject
    >;
    WormholeSendFast: TypedContractEvent<
      WormholeSendFastEvent.InputTuple,
      WormholeSendFastEvent.OutputTuple,
      WormholeSendFastEvent.OutputObject
    >;
  };
}
