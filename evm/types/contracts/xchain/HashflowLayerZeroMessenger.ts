/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IHashflowXChainMessenger {
  export type XChainQuoteStruct = {
    srcChainId: BigNumberish;
    dstChainId: BigNumberish;
    srcPool: AddressLike;
    dstPool: BytesLike;
    srcExternalAccount: AddressLike;
    dstExternalAccount: BytesLike;
    trader: AddressLike;
    dstTrader: BytesLike;
    baseToken: AddressLike;
    quoteToken: BytesLike;
    baseTokenAmount: BigNumberish;
    quoteTokenAmount: BigNumberish;
    txid: BytesLike;
  };

  export type XChainQuoteStructOutput = [
    srcChainId: bigint,
    dstChainId: bigint,
    srcPool: string,
    dstPool: string,
    srcExternalAccount: string,
    dstExternalAccount: string,
    trader: string,
    dstTrader: string,
    baseToken: string,
    quoteToken: string,
    baseTokenAmount: bigint,
    quoteTokenAmount: bigint,
    txid: string
  ] & {
    srcChainId: bigint;
    dstChainId: bigint;
    srcPool: string;
    dstPool: string;
    srcExternalAccount: string;
    dstExternalAccount: string;
    trader: string;
    dstTrader: string;
    baseToken: string;
    quoteToken: string;
    baseTokenAmount: bigint;
    quoteTokenAmount: bigint;
    txid: string;
  };
}

export interface HashflowLayerZeroMessengerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "forceResumeReceive"
      | "hChainId"
      | "hChainIdToLzChainId"
      | "lzChainIdToHChainId"
      | "lzEndpoint"
      | "lzGasEstimate"
      | "lzReceive"
      | "owner"
      | "pendingOwner"
      | "renounceOwnership"
      | "retryPayload"
      | "retryableLayerZeroPayloads"
      | "router"
      | "setConfig"
      | "setReceiveVersion"
      | "setSendVersion"
      | "tradeXChain"
      | "transferOwnership"
      | "updateLzChainIdForHashflowChainId"
      | "updateLzEndpoint"
      | "updateLzGasEstimate"
      | "updateXChainRemoteAddress"
      | "withdrawFunds"
      | "xChainRemotes"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LayerZeroMessageFailed"
      | "LayerZeroMessageMalformed"
      | "LayerZeroMessageReceive"
      | "LayerZeroMessageSend"
      | "LayerZeroMessageUnauthorized"
      | "LayerZeroPayloadStored"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "UpdateLzChainId"
      | "UpdateLzEndpoint"
      | "UpdateLzGasEstimate"
      | "UpdateXChainRemoteAddress"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceResumeReceive",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "hChainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hChainIdToLzChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lzChainIdToHChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lzEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lzGasEstimate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retryPayload",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "retryableLayerZeroPayloads",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReceiveVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSendVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeXChain",
    values: [
      IHashflowXChainMessenger.XChainQuoteStruct,
      AddressLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLzChainIdForHashflowChainId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLzEndpoint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLzGasEstimate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateXChainRemoteAddress",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "xChainRemotes",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceResumeReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hChainIdToLzChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lzChainIdToHChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzEndpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lzGasEstimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryableLayerZeroPayloads",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeXChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLzChainIdForHashflowChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLzEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLzGasEstimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateXChainRemoteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xChainRemotes",
    data: BytesLike
  ): Result;
}

export namespace LayerZeroMessageFailedEvent {
  export type InputTuple = [
    srcChainId: BigNumberish,
    srcAddress: BytesLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    srcChainId: bigint,
    srcAddress: string,
    nonce: bigint
  ];
  export interface OutputObject {
    srcChainId: bigint;
    srcAddress: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LayerZeroMessageMalformedEvent {
  export type InputTuple = [
    srcChainId: BigNumberish,
    srcAddress: BytesLike,
    nonce: BigNumberish,
    payload: BytesLike
  ];
  export type OutputTuple = [
    srcChainId: bigint,
    srcAddress: string,
    nonce: bigint,
    payload: string
  ];
  export interface OutputObject {
    srcChainId: bigint;
    srcAddress: string;
    nonce: bigint;
    payload: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LayerZeroMessageReceiveEvent {
  export type InputTuple = [txid: BytesLike];
  export type OutputTuple = [txid: string];
  export interface OutputObject {
    txid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LayerZeroMessageSendEvent {
  export type InputTuple = [txid: BytesLike];
  export type OutputTuple = [txid: string];
  export interface OutputObject {
    txid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LayerZeroMessageUnauthorizedEvent {
  export type InputTuple = [
    srcChainId: BigNumberish,
    srcAddress: BytesLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    srcChainId: bigint,
    srcAddress: string,
    nonce: bigint
  ];
  export interface OutputObject {
    srcChainId: bigint;
    srcAddress: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LayerZeroPayloadStoredEvent {
  export type InputTuple = [
    srcChainId: BigNumberish,
    srcAddress: BytesLike,
    nonce: BigNumberish,
    payload: BytesLike
  ];
  export type OutputTuple = [
    srcChainId: bigint,
    srcAddress: string,
    nonce: bigint,
    payload: string
  ];
  export interface OutputObject {
    srcChainId: bigint;
    srcAddress: string;
    nonce: bigint;
    payload: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateLzChainIdEvent {
  export type InputTuple = [hChainId: BigNumberish, lzChainId: BigNumberish];
  export type OutputTuple = [hChainId: bigint, lzChainId: bigint];
  export interface OutputObject {
    hChainId: bigint;
    lzChainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateLzEndpointEvent {
  export type InputTuple = [
    lzEndpoint: AddressLike,
    prevLzEndpoint: AddressLike
  ];
  export type OutputTuple = [lzEndpoint: string, prevLzEndpoint: string];
  export interface OutputObject {
    lzEndpoint: string;
    prevLzEndpoint: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateLzGasEstimateEvent {
  export type InputTuple = [gasEstimate: BigNumberish];
  export type OutputTuple = [gasEstimate: bigint];
  export interface OutputObject {
    gasEstimate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateXChainRemoteAddressEvent {
  export type InputTuple = [chainId: BigNumberish, remoteAddress: BytesLike];
  export type OutputTuple = [chainId: bigint, remoteAddress: string];
  export interface OutputObject {
    chainId: bigint;
    remoteAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HashflowLayerZeroMessenger extends BaseContract {
  connect(runner?: ContractRunner | null): HashflowLayerZeroMessenger;
  waitForDeployment(): Promise<this>;

  interface: HashflowLayerZeroMessengerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  forceResumeReceive: TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  hChainId: TypedContractMethod<[], [bigint], "view">;

  hChainIdToLzChainId: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  lzChainIdToHChainId: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  lzEndpoint: TypedContractMethod<[], [string], "view">;

  lzGasEstimate: TypedContractMethod<[], [bigint], "view">;

  lzReceive: TypedContractMethod<
    [
      srcChainId: BigNumberish,
      srcAddress: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "view">;

  retryPayload: TypedContractMethod<
    [
      srcChainId: BigNumberish,
      srcAddress: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  retryableLayerZeroPayloads: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish],
    [[bigint, string] & { payloadLength: bigint; payloadHash: string }],
    "view"
  >;

  router: TypedContractMethod<[], [string], "view">;

  setConfig: TypedContractMethod<
    [
      arg0: BigNumberish,
      _chainId: BigNumberish,
      _configType: BigNumberish,
      _config: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setReceiveVersion: TypedContractMethod<
    [version: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSendVersion: TypedContractMethod<
    [version: BigNumberish],
    [void],
    "nonpayable"
  >;

  tradeXChain: TypedContractMethod<
    [
      quote: IHashflowXChainMessenger.XChainQuoteStruct,
      caller: AddressLike,
      dstContract: BytesLike,
      arg3: BytesLike
    ],
    [void],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateLzChainIdForHashflowChainId: TypedContractMethod<
    [hashflowChainId: BigNumberish, lzChainId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateLzEndpoint: TypedContractMethod<
    [newLzEndpoint: AddressLike],
    [void],
    "nonpayable"
  >;

  updateLzGasEstimate: TypedContractMethod<
    [newGasEstimate: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateXChainRemoteAddress: TypedContractMethod<
    [_hChainId: BigNumberish, remoteAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<[], [void], "nonpayable">;

  xChainRemotes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "forceResumeReceive"
  ): TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hChainIdToLzChainId"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "lzChainIdToHChainId"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "lzEndpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lzGasEstimate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lzReceive"
  ): TypedContractMethod<
    [
      srcChainId: BigNumberish,
      srcAddress: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "retryPayload"
  ): TypedContractMethod<
    [
      srcChainId: BigNumberish,
      srcAddress: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "retryableLayerZeroPayloads"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish],
    [[bigint, string] & { payloadLength: bigint; payloadHash: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [
      arg0: BigNumberish,
      _chainId: BigNumberish,
      _configType: BigNumberish,
      _config: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReceiveVersion"
  ): TypedContractMethod<[version: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSendVersion"
  ): TypedContractMethod<[version: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tradeXChain"
  ): TypedContractMethod<
    [
      quote: IHashflowXChainMessenger.XChainQuoteStruct,
      caller: AddressLike,
      dstContract: BytesLike,
      arg3: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLzChainIdForHashflowChainId"
  ): TypedContractMethod<
    [hashflowChainId: BigNumberish, lzChainId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateLzEndpoint"
  ): TypedContractMethod<[newLzEndpoint: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLzGasEstimate"
  ): TypedContractMethod<[newGasEstimate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateXChainRemoteAddress"
  ): TypedContractMethod<
    [_hChainId: BigNumberish, remoteAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "xChainRemotes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "LayerZeroMessageFailed"
  ): TypedContractEvent<
    LayerZeroMessageFailedEvent.InputTuple,
    LayerZeroMessageFailedEvent.OutputTuple,
    LayerZeroMessageFailedEvent.OutputObject
  >;
  getEvent(
    key: "LayerZeroMessageMalformed"
  ): TypedContractEvent<
    LayerZeroMessageMalformedEvent.InputTuple,
    LayerZeroMessageMalformedEvent.OutputTuple,
    LayerZeroMessageMalformedEvent.OutputObject
  >;
  getEvent(
    key: "LayerZeroMessageReceive"
  ): TypedContractEvent<
    LayerZeroMessageReceiveEvent.InputTuple,
    LayerZeroMessageReceiveEvent.OutputTuple,
    LayerZeroMessageReceiveEvent.OutputObject
  >;
  getEvent(
    key: "LayerZeroMessageSend"
  ): TypedContractEvent<
    LayerZeroMessageSendEvent.InputTuple,
    LayerZeroMessageSendEvent.OutputTuple,
    LayerZeroMessageSendEvent.OutputObject
  >;
  getEvent(
    key: "LayerZeroMessageUnauthorized"
  ): TypedContractEvent<
    LayerZeroMessageUnauthorizedEvent.InputTuple,
    LayerZeroMessageUnauthorizedEvent.OutputTuple,
    LayerZeroMessageUnauthorizedEvent.OutputObject
  >;
  getEvent(
    key: "LayerZeroPayloadStored"
  ): TypedContractEvent<
    LayerZeroPayloadStoredEvent.InputTuple,
    LayerZeroPayloadStoredEvent.OutputTuple,
    LayerZeroPayloadStoredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UpdateLzChainId"
  ): TypedContractEvent<
    UpdateLzChainIdEvent.InputTuple,
    UpdateLzChainIdEvent.OutputTuple,
    UpdateLzChainIdEvent.OutputObject
  >;
  getEvent(
    key: "UpdateLzEndpoint"
  ): TypedContractEvent<
    UpdateLzEndpointEvent.InputTuple,
    UpdateLzEndpointEvent.OutputTuple,
    UpdateLzEndpointEvent.OutputObject
  >;
  getEvent(
    key: "UpdateLzGasEstimate"
  ): TypedContractEvent<
    UpdateLzGasEstimateEvent.InputTuple,
    UpdateLzGasEstimateEvent.OutputTuple,
    UpdateLzGasEstimateEvent.OutputObject
  >;
  getEvent(
    key: "UpdateXChainRemoteAddress"
  ): TypedContractEvent<
    UpdateXChainRemoteAddressEvent.InputTuple,
    UpdateXChainRemoteAddressEvent.OutputTuple,
    UpdateXChainRemoteAddressEvent.OutputObject
  >;

  filters: {
    "LayerZeroMessageFailed(uint16,bytes,uint64)": TypedContractEvent<
      LayerZeroMessageFailedEvent.InputTuple,
      LayerZeroMessageFailedEvent.OutputTuple,
      LayerZeroMessageFailedEvent.OutputObject
    >;
    LayerZeroMessageFailed: TypedContractEvent<
      LayerZeroMessageFailedEvent.InputTuple,
      LayerZeroMessageFailedEvent.OutputTuple,
      LayerZeroMessageFailedEvent.OutputObject
    >;

    "LayerZeroMessageMalformed(uint16,bytes,uint64,bytes)": TypedContractEvent<
      LayerZeroMessageMalformedEvent.InputTuple,
      LayerZeroMessageMalformedEvent.OutputTuple,
      LayerZeroMessageMalformedEvent.OutputObject
    >;
    LayerZeroMessageMalformed: TypedContractEvent<
      LayerZeroMessageMalformedEvent.InputTuple,
      LayerZeroMessageMalformedEvent.OutputTuple,
      LayerZeroMessageMalformedEvent.OutputObject
    >;

    "LayerZeroMessageReceive(bytes32)": TypedContractEvent<
      LayerZeroMessageReceiveEvent.InputTuple,
      LayerZeroMessageReceiveEvent.OutputTuple,
      LayerZeroMessageReceiveEvent.OutputObject
    >;
    LayerZeroMessageReceive: TypedContractEvent<
      LayerZeroMessageReceiveEvent.InputTuple,
      LayerZeroMessageReceiveEvent.OutputTuple,
      LayerZeroMessageReceiveEvent.OutputObject
    >;

    "LayerZeroMessageSend(bytes32)": TypedContractEvent<
      LayerZeroMessageSendEvent.InputTuple,
      LayerZeroMessageSendEvent.OutputTuple,
      LayerZeroMessageSendEvent.OutputObject
    >;
    LayerZeroMessageSend: TypedContractEvent<
      LayerZeroMessageSendEvent.InputTuple,
      LayerZeroMessageSendEvent.OutputTuple,
      LayerZeroMessageSendEvent.OutputObject
    >;

    "LayerZeroMessageUnauthorized(uint16,bytes,uint64)": TypedContractEvent<
      LayerZeroMessageUnauthorizedEvent.InputTuple,
      LayerZeroMessageUnauthorizedEvent.OutputTuple,
      LayerZeroMessageUnauthorizedEvent.OutputObject
    >;
    LayerZeroMessageUnauthorized: TypedContractEvent<
      LayerZeroMessageUnauthorizedEvent.InputTuple,
      LayerZeroMessageUnauthorizedEvent.OutputTuple,
      LayerZeroMessageUnauthorizedEvent.OutputObject
    >;

    "LayerZeroPayloadStored(uint16,bytes,uint64,bytes)": TypedContractEvent<
      LayerZeroPayloadStoredEvent.InputTuple,
      LayerZeroPayloadStoredEvent.OutputTuple,
      LayerZeroPayloadStoredEvent.OutputObject
    >;
    LayerZeroPayloadStored: TypedContractEvent<
      LayerZeroPayloadStoredEvent.InputTuple,
      LayerZeroPayloadStoredEvent.OutputTuple,
      LayerZeroPayloadStoredEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UpdateLzChainId(uint256,uint256)": TypedContractEvent<
      UpdateLzChainIdEvent.InputTuple,
      UpdateLzChainIdEvent.OutputTuple,
      UpdateLzChainIdEvent.OutputObject
    >;
    UpdateLzChainId: TypedContractEvent<
      UpdateLzChainIdEvent.InputTuple,
      UpdateLzChainIdEvent.OutputTuple,
      UpdateLzChainIdEvent.OutputObject
    >;

    "UpdateLzEndpoint(address,address)": TypedContractEvent<
      UpdateLzEndpointEvent.InputTuple,
      UpdateLzEndpointEvent.OutputTuple,
      UpdateLzEndpointEvent.OutputObject
    >;
    UpdateLzEndpoint: TypedContractEvent<
      UpdateLzEndpointEvent.InputTuple,
      UpdateLzEndpointEvent.OutputTuple,
      UpdateLzEndpointEvent.OutputObject
    >;

    "UpdateLzGasEstimate(uint256)": TypedContractEvent<
      UpdateLzGasEstimateEvent.InputTuple,
      UpdateLzGasEstimateEvent.OutputTuple,
      UpdateLzGasEstimateEvent.OutputObject
    >;
    UpdateLzGasEstimate: TypedContractEvent<
      UpdateLzGasEstimateEvent.InputTuple,
      UpdateLzGasEstimateEvent.OutputTuple,
      UpdateLzGasEstimateEvent.OutputObject
    >;

    "UpdateXChainRemoteAddress(uint16,bytes)": TypedContractEvent<
      UpdateXChainRemoteAddressEvent.InputTuple,
      UpdateXChainRemoteAddressEvent.OutputTuple,
      UpdateXChainRemoteAddressEvent.OutputObject
    >;
    UpdateXChainRemoteAddress: TypedContractEvent<
      UpdateXChainRemoteAddressEvent.InputTuple,
      UpdateXChainRemoteAddressEvent.OutputTuple,
      UpdateXChainRemoteAddressEvent.OutputObject
    >;
  };
}
