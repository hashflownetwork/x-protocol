/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface StakingVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "boostHFTStake"
      | "boostHFTStakeWithPermit"
      | "getStakePower"
      | "hft"
      | "increaseHFTStakeAmountFor"
      | "maxDaysToStake"
      | "owner"
      | "receiveHFTStakeTransfer"
      | "renounceOwnership"
      | "sourceVaultAuthorization"
      | "stakes"
      | "targetVaultAuthorization"
      | "transferHFTStake"
      | "transferOwnership"
      | "updateMaxDaysToStake"
      | "updateSourceVaultAuthorization"
      | "updateTargetVaultAuthorization"
      | "withdrawHFT"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BoostHFTStake"
      | "OwnershipTransferred"
      | "StakeChanged"
      | "TransferHFTStake"
      | "UpdateMaxDaysToStake"
      | "UpdateSourceVaultAuthorization"
      | "UpdateTargetVaultAuthorization"
      | "WithdrawHFT"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "boostHFTStake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "boostHFTStakeWithPermit",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakePower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "hft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseHFTStakeAmountFor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDaysToStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveHFTStakeTransfer",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sourceVaultAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "stakes", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "targetVaultAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferHFTStake",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxDaysToStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSourceVaultAuthorization",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTargetVaultAuthorization",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawHFT",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "boostHFTStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boostHFTStakeWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseHFTStakeAmountFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDaysToStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveHFTStakeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sourceVaultAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetVaultAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferHFTStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxDaysToStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSourceVaultAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTargetVaultAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawHFT",
    data: BytesLike
  ): Result;
}

export namespace BoostHFTStakeEvent {
  export type InputTuple = [
    account: AddressLike,
    amount: BigNumberish,
    daysStaked: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    amount: bigint,
    daysStaked: bigint
  ];
  export interface OutputObject {
    account: string;
    amount: bigint;
    daysStaked: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeChangedEvent {
  export type InputTuple = [
    account: AddressLike,
    amount: BigNumberish,
    lockExpiry: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    amount: bigint,
    lockExpiry: bigint
  ];
  export interface OutputObject {
    account: string;
    amount: bigint;
    lockExpiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferHFTStakeEvent {
  export type InputTuple = [
    account: AddressLike,
    targetVault: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    targetVault: string,
    amount: bigint
  ];
  export interface OutputObject {
    account: string;
    targetVault: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMaxDaysToStakeEvent {
  export type InputTuple = [maxDaysToStake: BigNumberish];
  export type OutputTuple = [maxDaysToStake: bigint];
  export interface OutputObject {
    maxDaysToStake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateSourceVaultAuthorizationEvent {
  export type InputTuple = [vault: AddressLike, isAuthorized: boolean];
  export type OutputTuple = [vault: string, isAuthorized: boolean];
  export interface OutputObject {
    vault: string;
    isAuthorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateTargetVaultAuthorizationEvent {
  export type InputTuple = [vault: AddressLike, isAuthorized: boolean];
  export type OutputTuple = [vault: string, isAuthorized: boolean];
  export interface OutputObject {
    vault: string;
    isAuthorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawHFTEvent {
  export type InputTuple = [
    account: AddressLike,
    amountWithdrawn: BigNumberish,
    amountRestaked: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    amountWithdrawn: bigint,
    amountRestaked: bigint
  ];
  export interface OutputObject {
    account: string;
    amountWithdrawn: bigint;
    amountRestaked: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StakingVault extends BaseContract {
  connect(runner?: ContractRunner | null): StakingVault;
  waitForDeployment(): Promise<this>;

  interface: StakingVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  boostHFTStake: TypedContractMethod<
    [amount: BigNumberish, daysToStake: BigNumberish],
    [void],
    "nonpayable"
  >;

  boostHFTStakeWithPermit: TypedContractMethod<
    [
      amount: BigNumberish,
      daysToStake: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      approvalAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getStakePower: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  hft: TypedContractMethod<[], [string], "view">;

  increaseHFTStakeAmountFor: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  maxDaysToStake: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  receiveHFTStakeTransfer: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish, lockExpiry: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "view">;

  sourceVaultAuthorization: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  stakes: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { amount: bigint; lockExpiry: bigint }],
    "view"
  >;

  targetVaultAuthorization: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  transferHFTStake: TypedContractMethod<
    [targetVault: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMaxDaysToStake: TypedContractMethod<
    [newMaxDaysToStake: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateSourceVaultAuthorization: TypedContractMethod<
    [vault: AddressLike, isAuthorized: boolean],
    [void],
    "nonpayable"
  >;

  updateTargetVaultAuthorization: TypedContractMethod<
    [vault: AddressLike, isAuthorized: boolean],
    [void],
    "nonpayable"
  >;

  withdrawHFT: TypedContractMethod<
    [amountToRestake: BigNumberish, daysToRestake: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "boostHFTStake"
  ): TypedContractMethod<
    [amount: BigNumberish, daysToStake: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "boostHFTStakeWithPermit"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      daysToStake: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      approvalAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getStakePower"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "hft"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increaseHFTStakeAmountFor"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxDaysToStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveHFTStakeTransfer"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish, lockExpiry: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "sourceVaultAuthorization"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "stakes"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { amount: bigint; lockExpiry: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "targetVaultAuthorization"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferHFTStake"
  ): TypedContractMethod<[targetVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxDaysToStake"
  ): TypedContractMethod<
    [newMaxDaysToStake: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSourceVaultAuthorization"
  ): TypedContractMethod<
    [vault: AddressLike, isAuthorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTargetVaultAuthorization"
  ): TypedContractMethod<
    [vault: AddressLike, isAuthorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawHFT"
  ): TypedContractMethod<
    [amountToRestake: BigNumberish, daysToRestake: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BoostHFTStake"
  ): TypedContractEvent<
    BoostHFTStakeEvent.InputTuple,
    BoostHFTStakeEvent.OutputTuple,
    BoostHFTStakeEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "StakeChanged"
  ): TypedContractEvent<
    StakeChangedEvent.InputTuple,
    StakeChangedEvent.OutputTuple,
    StakeChangedEvent.OutputObject
  >;
  getEvent(
    key: "TransferHFTStake"
  ): TypedContractEvent<
    TransferHFTStakeEvent.InputTuple,
    TransferHFTStakeEvent.OutputTuple,
    TransferHFTStakeEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMaxDaysToStake"
  ): TypedContractEvent<
    UpdateMaxDaysToStakeEvent.InputTuple,
    UpdateMaxDaysToStakeEvent.OutputTuple,
    UpdateMaxDaysToStakeEvent.OutputObject
  >;
  getEvent(
    key: "UpdateSourceVaultAuthorization"
  ): TypedContractEvent<
    UpdateSourceVaultAuthorizationEvent.InputTuple,
    UpdateSourceVaultAuthorizationEvent.OutputTuple,
    UpdateSourceVaultAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "UpdateTargetVaultAuthorization"
  ): TypedContractEvent<
    UpdateTargetVaultAuthorizationEvent.InputTuple,
    UpdateTargetVaultAuthorizationEvent.OutputTuple,
    UpdateTargetVaultAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawHFT"
  ): TypedContractEvent<
    WithdrawHFTEvent.InputTuple,
    WithdrawHFTEvent.OutputTuple,
    WithdrawHFTEvent.OutputObject
  >;

  filters: {
    "BoostHFTStake(address,uint128,uint64)": TypedContractEvent<
      BoostHFTStakeEvent.InputTuple,
      BoostHFTStakeEvent.OutputTuple,
      BoostHFTStakeEvent.OutputObject
    >;
    BoostHFTStake: TypedContractEvent<
      BoostHFTStakeEvent.InputTuple,
      BoostHFTStakeEvent.OutputTuple,
      BoostHFTStakeEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "StakeChanged(address,uint128,uint64)": TypedContractEvent<
      StakeChangedEvent.InputTuple,
      StakeChangedEvent.OutputTuple,
      StakeChangedEvent.OutputObject
    >;
    StakeChanged: TypedContractEvent<
      StakeChangedEvent.InputTuple,
      StakeChangedEvent.OutputTuple,
      StakeChangedEvent.OutputObject
    >;

    "TransferHFTStake(address,address,uint128)": TypedContractEvent<
      TransferHFTStakeEvent.InputTuple,
      TransferHFTStakeEvent.OutputTuple,
      TransferHFTStakeEvent.OutputObject
    >;
    TransferHFTStake: TypedContractEvent<
      TransferHFTStakeEvent.InputTuple,
      TransferHFTStakeEvent.OutputTuple,
      TransferHFTStakeEvent.OutputObject
    >;

    "UpdateMaxDaysToStake(uint16)": TypedContractEvent<
      UpdateMaxDaysToStakeEvent.InputTuple,
      UpdateMaxDaysToStakeEvent.OutputTuple,
      UpdateMaxDaysToStakeEvent.OutputObject
    >;
    UpdateMaxDaysToStake: TypedContractEvent<
      UpdateMaxDaysToStakeEvent.InputTuple,
      UpdateMaxDaysToStakeEvent.OutputTuple,
      UpdateMaxDaysToStakeEvent.OutputObject
    >;

    "UpdateSourceVaultAuthorization(address,bool)": TypedContractEvent<
      UpdateSourceVaultAuthorizationEvent.InputTuple,
      UpdateSourceVaultAuthorizationEvent.OutputTuple,
      UpdateSourceVaultAuthorizationEvent.OutputObject
    >;
    UpdateSourceVaultAuthorization: TypedContractEvent<
      UpdateSourceVaultAuthorizationEvent.InputTuple,
      UpdateSourceVaultAuthorizationEvent.OutputTuple,
      UpdateSourceVaultAuthorizationEvent.OutputObject
    >;

    "UpdateTargetVaultAuthorization(address,bool)": TypedContractEvent<
      UpdateTargetVaultAuthorizationEvent.InputTuple,
      UpdateTargetVaultAuthorizationEvent.OutputTuple,
      UpdateTargetVaultAuthorizationEvent.OutputObject
    >;
    UpdateTargetVaultAuthorization: TypedContractEvent<
      UpdateTargetVaultAuthorizationEvent.InputTuple,
      UpdateTargetVaultAuthorizationEvent.OutputTuple,
      UpdateTargetVaultAuthorizationEvent.OutputObject
    >;

    "WithdrawHFT(address,uint128,uint128)": TypedContractEvent<
      WithdrawHFTEvent.InputTuple,
      WithdrawHFTEvent.OutputTuple,
      WithdrawHFTEvent.OutputObject
    >;
    WithdrawHFT: TypedContractEvent<
      WithdrawHFTEvent.InputTuple,
      WithdrawHFTEvent.OutputTuple,
      WithdrawHFTEvent.OutputObject
    >;
  };
}
