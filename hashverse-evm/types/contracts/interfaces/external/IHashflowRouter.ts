/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IHashflowRouter {
  export type RFQTQuoteStruct = {
    pool: AddressLike;
    externalAccount: AddressLike;
    trader: AddressLike;
    effectiveTrader: AddressLike;
    baseToken: AddressLike;
    quoteToken: AddressLike;
    effectiveBaseTokenAmount: BigNumberish;
    maxBaseTokenAmount: BigNumberish;
    maxQuoteTokenAmount: BigNumberish;
    quoteExpiry: BigNumberish;
    nonce: BigNumberish;
    txid: BytesLike;
    signature: BytesLike;
  };

  export type RFQTQuoteStructOutput = [
    pool: string,
    externalAccount: string,
    trader: string,
    effectiveTrader: string,
    baseToken: string,
    quoteToken: string,
    effectiveBaseTokenAmount: bigint,
    maxBaseTokenAmount: bigint,
    maxQuoteTokenAmount: bigint,
    quoteExpiry: bigint,
    nonce: bigint,
    txid: string,
    signature: string
  ] & {
    pool: string;
    externalAccount: string;
    trader: string;
    effectiveTrader: string;
    baseToken: string;
    quoteToken: string;
    effectiveBaseTokenAmount: bigint;
    maxBaseTokenAmount: bigint;
    maxQuoteTokenAmount: bigint;
    quoteExpiry: bigint;
    nonce: bigint;
    txid: string;
    signature: string;
  };
}

export interface IHashflowRouterInterface extends Interface {
  getFunction(nameOrSignature: "tradeSingleHop"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "tradeSingleHop",
    values: [IHashflowRouter.RFQTQuoteStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "tradeSingleHop",
    data: BytesLike
  ): Result;
}

export interface IHashflowRouter extends BaseContract {
  connect(runner?: ContractRunner | null): IHashflowRouter;
  waitForDeployment(): Promise<this>;

  interface: IHashflowRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  tradeSingleHop: TypedContractMethod<
    [quote: IHashflowRouter.RFQTQuoteStruct],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "tradeSingleHop"
  ): TypedContractMethod<
    [quote: IHashflowRouter.RFQTQuoteStruct],
    [void],
    "payable"
  >;

  filters: {};
}
