/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IRenovaCommandDeckBaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createQuest"
      | "depositTokenForQuest"
      | "hashflowRouter"
      | "questDeploymentAddresses"
      | "questIdsByDeploymentAddress"
      | "questOwner"
      | "renovaAvatar"
      | "renovaItem"
      | "updateHashflowRouter"
      | "updateQuestOwner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CreateQuest"
      | "UpdateHashflowRouter"
      | "UpdateQuestOwner"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createQuest",
    values: [BytesLike, BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokenForQuest",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashflowRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "questDeploymentAddresses",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "questIdsByDeploymentAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "questOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renovaAvatar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renovaItem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateHashflowRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuestOwner",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTokenForQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashflowRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "questDeploymentAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "questIdsByDeploymentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "questOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renovaAvatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renovaItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateHashflowRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQuestOwner",
    data: BytesLike
  ): Result;
}

export namespace CreateQuestEvent {
  export type InputTuple = [
    questId: BytesLike,
    questAddress: AddressLike,
    startTime: BigNumberish,
    endTime: BigNumberish,
    depositToken: AddressLike,
    minDepositAmount: BigNumberish
  ];
  export type OutputTuple = [
    questId: string,
    questAddress: string,
    startTime: bigint,
    endTime: bigint,
    depositToken: string,
    minDepositAmount: bigint
  ];
  export interface OutputObject {
    questId: string;
    questAddress: string;
    startTime: bigint;
    endTime: bigint;
    depositToken: string;
    minDepositAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateHashflowRouterEvent {
  export type InputTuple = [newRouter: AddressLike, oldRouter: AddressLike];
  export type OutputTuple = [newRouter: string, oldRouter: string];
  export interface OutputObject {
    newRouter: string;
    oldRouter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateQuestOwnerEvent {
  export type InputTuple = [
    newQuestOwner: AddressLike,
    oldQuestOwner: AddressLike
  ];
  export type OutputTuple = [newQuestOwner: string, oldQuestOwner: string];
  export interface OutputObject {
    newQuestOwner: string;
    oldQuestOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRenovaCommandDeckBase extends BaseContract {
  connect(runner?: ContractRunner | null): IRenovaCommandDeckBase;
  waitForDeployment(): Promise<this>;

  interface: IRenovaCommandDeckBaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createQuest: TypedContractMethod<
    [
      questId: BytesLike,
      startTime: BigNumberish,
      endTime: BigNumberish,
      depositToken: AddressLike,
      minDepositAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositTokenForQuest: TypedContractMethod<
    [player: AddressLike, depositAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  hashflowRouter: TypedContractMethod<[], [string], "view">;

  questDeploymentAddresses: TypedContractMethod<
    [questId: BytesLike],
    [string],
    "view"
  >;

  questIdsByDeploymentAddress: TypedContractMethod<
    [questAddress: AddressLike],
    [string],
    "view"
  >;

  questOwner: TypedContractMethod<[], [string], "view">;

  renovaAvatar: TypedContractMethod<[], [string], "view">;

  renovaItem: TypedContractMethod<[], [string], "view">;

  updateHashflowRouter: TypedContractMethod<
    [hashflowRouter: AddressLike],
    [void],
    "nonpayable"
  >;

  updateQuestOwner: TypedContractMethod<
    [questOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createQuest"
  ): TypedContractMethod<
    [
      questId: BytesLike,
      startTime: BigNumberish,
      endTime: BigNumberish,
      depositToken: AddressLike,
      minDepositAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositTokenForQuest"
  ): TypedContractMethod<
    [player: AddressLike, depositAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hashflowRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "questDeploymentAddresses"
  ): TypedContractMethod<[questId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "questIdsByDeploymentAddress"
  ): TypedContractMethod<[questAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "questOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renovaAvatar"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renovaItem"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateHashflowRouter"
  ): TypedContractMethod<[hashflowRouter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateQuestOwner"
  ): TypedContractMethod<[questOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CreateQuest"
  ): TypedContractEvent<
    CreateQuestEvent.InputTuple,
    CreateQuestEvent.OutputTuple,
    CreateQuestEvent.OutputObject
  >;
  getEvent(
    key: "UpdateHashflowRouter"
  ): TypedContractEvent<
    UpdateHashflowRouterEvent.InputTuple,
    UpdateHashflowRouterEvent.OutputTuple,
    UpdateHashflowRouterEvent.OutputObject
  >;
  getEvent(
    key: "UpdateQuestOwner"
  ): TypedContractEvent<
    UpdateQuestOwnerEvent.InputTuple,
    UpdateQuestOwnerEvent.OutputTuple,
    UpdateQuestOwnerEvent.OutputObject
  >;

  filters: {
    "CreateQuest(bytes32,address,uint256,uint256,address,uint256)": TypedContractEvent<
      CreateQuestEvent.InputTuple,
      CreateQuestEvent.OutputTuple,
      CreateQuestEvent.OutputObject
    >;
    CreateQuest: TypedContractEvent<
      CreateQuestEvent.InputTuple,
      CreateQuestEvent.OutputTuple,
      CreateQuestEvent.OutputObject
    >;

    "UpdateHashflowRouter(address,address)": TypedContractEvent<
      UpdateHashflowRouterEvent.InputTuple,
      UpdateHashflowRouterEvent.OutputTuple,
      UpdateHashflowRouterEvent.OutputObject
    >;
    UpdateHashflowRouter: TypedContractEvent<
      UpdateHashflowRouterEvent.InputTuple,
      UpdateHashflowRouterEvent.OutputTuple,
      UpdateHashflowRouterEvent.OutputObject
    >;

    "UpdateQuestOwner(address,address)": TypedContractEvent<
      UpdateQuestOwnerEvent.InputTuple,
      UpdateQuestOwnerEvent.OutputTuple,
      UpdateQuestOwnerEvent.OutputObject
    >;
    UpdateQuestOwner: TypedContractEvent<
      UpdateQuestOwnerEvent.InputTuple,
      UpdateQuestOwnerEvent.OutputTuple,
      UpdateQuestOwnerEvent.OutputObject
    >;
  };
}
