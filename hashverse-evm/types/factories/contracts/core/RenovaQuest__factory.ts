/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  RenovaQuest,
  RenovaQuestInterface,
} from "../../../contracts/core/RenovaQuest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "renovaAvatar",
        type: "address",
      },
      {
        internalType: "address",
        name: "hashflowRouter",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_endTime",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_depositToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_minDepositAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_questOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "DepositToken",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RegisterPlayer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "baseToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "quoteToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "baseTokenAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "quoteTokenAmount",
        type: "uint256",
      },
    ],
    name: "Trade",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "UpdateTokenAuthorizationStatus",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "WithdrawToken",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
    ],
    name: "depositAndEnter",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "depositToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "endTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minDepositAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numRegisteredPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "portfolioTokenBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "questOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "registered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "startTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "pool",
            type: "address",
          },
          {
            internalType: "address",
            name: "externalAccount",
            type: "address",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "address",
            name: "effectiveTrader",
            type: "address",
          },
          {
            internalType: "address",
            name: "baseToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "quoteToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "effectiveBaseTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "baseTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quoteTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quoteExpiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "txid",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct IQuote.RFQTQuote",
        name: "quote",
        type: "tuple",
      },
    ],
    name: "trade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "updateTokenAuthorization",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "withdrawTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6101806040523480156200001257600080fd5b50604051620022ef380380620022ef833981016040819052620000359162000256565b600160005533608052428511620000b95760405162461bcd60e51b815260206004820152603c60248201527f52656e6f766151756573743a3a636f6e7374727563746f72205374617274207460448201527f696d652073686f756c6420626520696e20746865206675747572652e0000000060648201526084015b60405180910390fd5b848411620001305760405162461bcd60e51b815260206004820152603d60248201527f52656e6f766151756573743a3a636f6e7374727563746f7220456e642074696d60448201527f652073686f756c642062652061667465722073746172742074696d652e0000006064820152608401620000b0565b62a37a00620001408686620002d0565b1115620001a15760405162461bcd60e51b815260206004820152602860248201527f52656e6f766151756573743a3a636f6e7374727563746f72205175657374207460448201526737b7903637b7339760c11b6064820152608401620000b0565b60e08590526101008490526001600160a01b03838116610120819052610140849052600081815260026020908152604091829020805460ff19166001908117909155858516610160528b851660a052938a1660c05281519283528201929092527fca81d9f3a3bf255dd1251f103d6a27ab2aabb091b3d80c54aec8ec37af53e307910160405180910390a150505050505050620002f8565b80516001600160a01b03811681146200025157600080fd5b919050565b600080600080600080600060e0888a0312156200027257600080fd5b6200027d8862000239565b96506200028d6020890162000239565b95506040880151945060608801519350620002ab6080890162000239565b925060a08801519150620002c260c0890162000239565b905092959891949750929550565b81810381811115620002f257634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a05160c05160e05161010051610120516101405161016051611f3d620003b2600039600081816102990152610ad80152600081816101850152610f9a01526000818161024d015281816111ca0152818161130c0152818161136f015281816113fd01528181611442015261155301526000818161012f0152818161053d0152610ef70152600081816101b9015261051201526000818161096e01526109c2015260006110e3015260006114de0152611f3d6000f3fe6080604052600436106100c65760003560e01c8063b2dd5c071161007f578063dda1958511610059578063dda19585146102bb578063e34c739d146102db578063e744092e146102f1578063eac38b0d1461032157600080fd5b8063b2dd5c07146101fb578063c89039c51461023b578063d9df1b8b1461028757600080fd5b806306271172146100d25780633197cbb61461011d5780635ecb16cd14610151578063645006ca1461017357806378e97925146101a7578063981abf76146101db57600080fd5b366100cd57005b600080fd5b3480156100de57600080fd5b5061010a6100ed366004611963565b600460209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b34801561012957600080fd5b5061010a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561015d57600080fd5b5061017161016c366004611a07565b610334565b005b34801561017f57600080fd5b5061010a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156101b357600080fd5b5061010a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156101e757600080fd5b506101716101f6366004611b24565b610508565b34801561020757600080fd5b5061022b610216366004611c3c565b60016020526000908152604090205460ff1681565b6040519015158152602001610114565b34801561024757600080fd5b5061026f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610114565b34801561029357600080fd5b5061026f7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102c757600080fd5b506101716102d6366004611c6c565b610ad5565b3480156102e757600080fd5b5061010a60035481565b3480156102fd57600080fd5b5061022b61030c366004611c3c565b60026020526000908152604090205460ff1681565b61017161032f366004611ca3565b610be0565b61033c610bfc565b60005b81518110156104fa573360009081526004602052604081208351829085908590811061036d5761036d611cbc565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020549050806000036103a657506104e8565b336000908152600460205260408120845182908690869081106103cb576103cb611cbc565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055506103fe3390565b6001600160a01b03167f037238854fe57fbf51f09946f854fc3916fe83938d6521f09bd05463839f130484848151811061043a5761043a611cbc565b6020026020010151836040516104659291906001600160a01b03929092168252602082015260400190565b60405180910390a260006001600160a01b031683838151811061048a5761048a611cbc565b60200260200101516001600160a01b0316036104af576104aa3382610c55565b6104e6565b6104e633828585815181106104c6576104c6611cbc565b60200260200101516001600160a01b0316610d739092919063ffffffff16565b505b806104f281611ce8565b91505061033f565b506105056001600055565b50565b610510610bfc565b7f0000000000000000000000000000000000000000000000000000000000000000421015801561055f57507f000000000000000000000000000000000000000000000000000000000000000042105b6105c15760405162461bcd60e51b815260206004820152602860248201527f52656e6f766151756573743a3a7472616465205175657374206973206e6f742060448201526737b733b7b4b7339760c11b60648201526084015b60405180910390fd5b60a08101516001600160a01b031660009081526002602052604090205460ff166106415760405162461bcd60e51b815260206004820152602b60248201527f52656e6f766151756573743a3a74726164652051756f746520546f6b656e206e60448201526a37ba1030b63637bbb2b21760a91b60648201526084016105b8565b3360009081526001602052604090205460ff166106b25760405162461bcd60e51b815260206004820152602960248201527f52656e6f766151756573743a3a747261646520506c61796572206e6f7420726560448201526833b4b9ba32b932b21760b91b60648201526084016105b8565b60c081015133600090815260046020908152604080832060808601516001600160a01b03168452909152902054101561073d5760405162461bcd60e51b815260206004820152602760248201527f52656e6f766151756573743a3a747261646520496e73756666696369656e742060448201526662616c616e636560c81b60648201526084016105b8565b60408101516001600160a01b031630146107b55760405162461bcd60e51b815260206004820152603360248201527f52656e6f766151756573743a3a7472616465205472616465722073686f756c646044820152721031329028bab2b9ba1031b7b73a3930b1ba1760691b60648201526084016105b8565b60608101516001600160a01b0316331461082f5760405162461bcd60e51b815260206004820152603560248201527f52656e6f766151756573743a3a747261646520456666656374697665205472616044820152743232b91039b437bab63210313290383630bcb2b91760591b60648201526084016105b8565b61010081015160e082015160c0830151101561086c578160e001518261010001518360c0015161085f9190611d01565b6108699190611d18565b90505b60c082015133600090815260046020908152604080832060808701516001600160a01b03168452909152812080549091906108a8908490611d3a565b909155505033600090815260046020908152604080832060a08601516001600160a01b03168452909152812080548392906108e4908490611d4d565b909155505060808281015160a084015160c0850151604080516001600160a01b03948516815293909216602084015282820152606082018490525133927fec0d3e799aa270a144d7e3be084ccfc657450e33ecea1b1a4154c95cedaae5c3928290030190a260808201516000906001600160a01b0316610969575060c08201516109af565b6109af7f00000000000000000000000000000000000000000000000000000000000000008460c0015185608001516001600160a01b0316610dd69092919063ffffffff16565b60006109be8460a00151610e6b565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c52ac72083866040518363ffffffff1660e01b8152600401610a0d9190611db0565b6000604051808303818588803b158015610a2657600080fd5b505af1158015610a3a573d6000803e3d6000fd5b50505050506000610a4e8560a00151610e6b565b905080610a5b8584611d4d565b14610ac75760405162461bcd60e51b815260206004820152603660248201527f52656e6f766151756573743a3a747261646520446964206e6f742072656365696044820152753b329032b737bab3b41038bab7ba32903a37b5b2b71760511b60648201526084016105b8565b505050506105056001600055565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610b7d5760405162461bcd60e51b815260206004820152604160248201527f52656e6f766151756573743a3a757064617465546f6b656e417574686f72697a60448201527f6174696f6e2053656e646572206d757374206265207175657374206f776e65726064820152601760f91b608482015260a4016105b8565b6001600160a01b038216600081815260026020908152604091829020805460ff19168515159081179091558251938452908301527fca81d9f3a3bf255dd1251f103d6a27ab2aabb091b3d80c54aec8ec37af53e307910160405180910390a15050565b610be8610bfc565b610bf23382610ef5565b6105056001600055565b600260005403610c4e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105b8565b6002600055565b80471015610ca55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016105b8565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610cf2576040519150601f19603f3d011682016040523d82523d6000602084013e610cf7565b606091505b5050905080610d6e5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016105b8565b505050565b6040516001600160a01b038316602482015260448101829052610d6e90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611640565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610e278482611715565b610e65576040516001600160a01b038416602482015260006044820152610e5b90859063095ea7b360e01b90606401610d9f565b610e658482611640565b50505050565b60006001600160a01b038216610e82575047919050565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eea9190611ea2565b92915050565b919050565b7f00000000000000000000000000000000000000000000000000000000000000004210610f985760405162461bcd60e51b815260206004820152604560248201527f52656e6f766151756573743a3a5f6465706f736974416e64456e74657220436160448201527f6e206f6e6c79206465706f736974206265666f7265207468652071756573742060648201526432b732399760d91b608482015260a4016105b8565b7f00000000000000000000000000000000000000000000000000000000000000008110156110265760405162461bcd60e51b815260206004820152603560248201527f52656e6f766151756573743a3a5f6465706f736974416e64456e7465722044656044820152743837b9b4ba1030b6b7bab73a103a37b7903637bb9760591b60648201526084016105b8565b6001600160a01b03821660009081526001602052604090205460ff16156110c15760405162461bcd60e51b815260206004820152604360248201527f52656e6f766151756573743a3a5f6465706f736974416e64456e74657220506c60448201527f617965722068617320616c726561647920656e7465726564207468652071756560648201526239ba1760e91b608482015260a4016105b8565b60405163fc97a30360e01b81526001600160a01b0383811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063fc97a30390602401602060405180830381865afa15801561112c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111509190611ea2565b9050806000036111c85760405162461bcd60e51b815260206004820152603b60248201527f52656e6f766151756573743a3a5f6465706f736974416e64456e74657220506c60448201527f6179657220686173206e6f74206d696e746564204176617461722e000000000060648201526084016105b8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112705781341461126b5760405162461bcd60e51b815260206004820152603c60248201527f52656e6f766151756573743a3a5f6465706f736974416e64456e746572206d7360448201527f672e76616c75652073686f756c6420657175616c20616d6f756e742e0000000060648201526084016105b8565b6112db565b34156112db5760405162461bcd60e51b815260206004820152603460248201527f52656e6f766151756573743a3a5f6465706f736974416e64456e746572206d7360448201527333973b30b63ab29039b437bab63210313290181760611b60648201526084016105b8565b6001600160a01b038084166000908152600160208181526040808420805460ff1916909317909255600481528183207f00000000000000000000000000000000000000000000000000000000000000009094168352929092529081208054849290611347908490611d4d565b90915550506003805490600061135c83611ce8565b9091555050604080516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081168252602082018590528516917f4b3f81827ede20c81afbf1bb77b954afcdcae24d391d99042310cb1d9210dd57910160405180910390a26040516001600160a01b038416907f78a3e890e8235e6b7edfa99fe4cdff6feceeeedcc419289d33f67eee0863307590600090a27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031615610d6e576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b59190611ea2565b60405163223c296b60e21b81526001600160a01b038681166004830152602482018690529192507f0000000000000000000000000000000000000000000000000000000000000000909116906388f0a5ac90604401600060405180830381600087803b15801561152457600080fd5b505af1158015611538573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a0823190602401602060405180830381865afa1580156115a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c79190611ea2565b90506115d38483611d4d565b81146116395760405162461bcd60e51b815260206004820152602f60248201527f52656e6f766151756573743a3a5f6465706f736974416e64456e74657220426160448201526e3630b731b29036b4b9b6b0ba31b41760891b60648201526084016105b8565b5050505050565b6000611695826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117bc9092919063ffffffff16565b90508051600014806116b65750808060200190518101906116b69190611ebb565b610d6e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105b8565b6000806000846001600160a01b0316846040516117329190611ed8565b6000604051808303816000865af19150503d806000811461176f576040519150601f19603f3d011682016040523d82523d6000602084013e611774565b606091505b509150915081801561179e57508051158061179e57508080602001905181019061179e9190611ebb565b80156117b357506001600160a01b0385163b15155b95945050505050565b60606117cb84846000856117d3565b949350505050565b6060824710156118345760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105b8565b600080866001600160a01b031685876040516118509190611ed8565b60006040518083038185875af1925050503d806000811461188d576040519150601f19603f3d011682016040523d82523d6000602084013e611892565b606091505b50915091506118a3878383876118ae565b979650505050505050565b6060831561191d578251600003611916576001600160a01b0385163b6119165760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105b8565b50816117cb565b6117cb83838151156119325781518083602001fd5b8060405162461bcd60e51b81526004016105b89190611ef4565b80356001600160a01b0381168114610ef057600080fd5b6000806040838503121561197657600080fd5b61197f8361194c565b915061198d6020840161194c565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff811182821017156119d0576119d0611996565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156119ff576119ff611996565b604052919050565b60006020808385031215611a1a57600080fd5b823567ffffffffffffffff80821115611a3257600080fd5b818501915085601f830112611a4657600080fd5b813581811115611a5857611a58611996565b8060051b9150611a698483016119d6565b8181529183018401918481019088841115611a8357600080fd5b938501935b83851015611aa857611a998561194c565b82529385019390850190611a88565b98975050505050505050565b600082601f830112611ac557600080fd5b813567ffffffffffffffff811115611adf57611adf611996565b611af2601f8201601f19166020016119d6565b818152846020838601011115611b0757600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611b3657600080fd5b813567ffffffffffffffff80821115611b4e57600080fd5b908301906101a08286031215611b6357600080fd5b611b6b6119ac565b611b748361194c565b8152611b826020840161194c565b6020820152611b936040840161194c565b6040820152611ba46060840161194c565b6060820152611bb56080840161194c565b6080820152611bc660a0840161194c565b60a082015260c0838101359082015260e0808401359082015261010080840135908201526101208084013590820152610140808401359082015261016080840135908201526101808084013583811115611c1f57600080fd5b611c2b88828701611ab4565b918301919091525095945050505050565b600060208284031215611c4e57600080fd5b611c578261194c565b9392505050565b801515811461050557600080fd5b60008060408385031215611c7f57600080fd5b611c888361194c565b91506020830135611c9881611c5e565b809150509250929050565b600060208284031215611cb557600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611cfa57611cfa611cd2565b5060010190565b8082028115828204841417610eea57610eea611cd2565b600082611d3557634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610eea57610eea611cd2565b80820180821115610eea57610eea611cd2565b60005b83811015611d7b578181015183820152602001611d63565b50506000910152565b60008151808452611d9c816020860160208601611d60565b601f01601f19169290920160200192915050565b60208152611dca6020820183516001600160a01b03169052565b60006020830151611de660408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c083015160e08381019190915283015161010080840191909152830151610120808401919091528301516101408084019190915283015161016080840191909152830151610180808401919091528301516101a0808401526117cb6101c0840182611d84565b600060208284031215611eb457600080fd5b5051919050565b600060208284031215611ecd57600080fd5b8151611c5781611c5e565b60008251611eea818460208701611d60565b9190910192915050565b602081526000611c576020830184611d8456fea2646970667358221220f19dc568193d84f8c69f3cb80e221febed1e1614647a0becb7e577ee42fa132b64736f6c63430008130033";

type RenovaQuestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RenovaQuestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RenovaQuest__factory extends ContractFactory {
  constructor(...args: RenovaQuestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    renovaAvatar: AddressLike,
    hashflowRouter: AddressLike,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _depositToken: AddressLike,
    _minDepositAmount: BigNumberish,
    _questOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      renovaAvatar,
      hashflowRouter,
      _startTime,
      _endTime,
      _depositToken,
      _minDepositAmount,
      _questOwner,
      overrides || {}
    );
  }
  override deploy(
    renovaAvatar: AddressLike,
    hashflowRouter: AddressLike,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _depositToken: AddressLike,
    _minDepositAmount: BigNumberish,
    _questOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      renovaAvatar,
      hashflowRouter,
      _startTime,
      _endTime,
      _depositToken,
      _minDepositAmount,
      _questOwner,
      overrides || {}
    ) as Promise<
      RenovaQuest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RenovaQuest__factory {
    return super.connect(runner) as RenovaQuest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RenovaQuestInterface {
    return new Interface(_abi) as RenovaQuestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): RenovaQuest {
    return new Contract(address, _abi, runner) as unknown as RenovaQuest;
  }
}
