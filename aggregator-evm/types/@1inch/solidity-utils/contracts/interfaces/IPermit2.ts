/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IPermit2 {
  export type PackedAllowanceStruct = {
    amount: BigNumberish;
    expiration: BigNumberish;
    nonce: BigNumberish;
  };

  export type PackedAllowanceStructOutput = [
    amount: bigint,
    expiration: bigint,
    nonce: bigint
  ] & { amount: bigint; expiration: bigint; nonce: bigint };

  export type PermitDetailsStruct = {
    token: AddressLike;
    amount: BigNumberish;
    expiration: BigNumberish;
    nonce: BigNumberish;
  };

  export type PermitDetailsStructOutput = [
    token: string,
    amount: bigint,
    expiration: bigint,
    nonce: bigint
  ] & { token: string; amount: bigint; expiration: bigint; nonce: bigint };

  export type PermitSingleStruct = {
    details: IPermit2.PermitDetailsStruct;
    spender: AddressLike;
    sigDeadline: BigNumberish;
  };

  export type PermitSingleStructOutput = [
    details: IPermit2.PermitDetailsStructOutput,
    spender: string,
    sigDeadline: bigint
  ] & {
    details: IPermit2.PermitDetailsStructOutput;
    spender: string;
    sigDeadline: bigint;
  };
}

export interface IPermit2Interface extends Interface {
  getFunction(
    nameOrSignature: "allowance" | "permit" | "transferFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [AddressLike, IPermit2.PermitSingleStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export interface IPermit2 extends BaseContract {
  connect(runner?: ContractRunner | null): IPermit2;
  waitForDeployment(): Promise<this>;

  interface: IPermit2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [user: AddressLike, token: AddressLike, spender: AddressLike],
    [IPermit2.PackedAllowanceStructOutput],
    "view"
  >;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      permitSingle: IPermit2.PermitSingleStruct,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [
      user: AddressLike,
      spender: AddressLike,
      amount: BigNumberish,
      token: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike, spender: AddressLike],
    [IPermit2.PackedAllowanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      permitSingle: IPermit2.PermitSingleStruct,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [
      user: AddressLike,
      spender: AddressLike,
      amount: BigNumberish,
      token: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
