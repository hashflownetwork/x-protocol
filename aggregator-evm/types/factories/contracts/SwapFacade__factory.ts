/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  SwapFacade,
  SwapFacadeInterface,
} from "../../contracts/SwapFacade";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "feeCollector_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AddressCannotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptySwap",
    type: "error",
  },
  {
    inputs: [],
    name: "EthValueAmountMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "EthValueSourceTokenMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "MinReturnError",
    type: "error",
  },
  {
    inputs: [],
    name: "MultiSwapNotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "PermitNotAllowedForEthSwap",
    type: "error",
  },
  {
    inputs: [],
    name: "SafeTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "SafeTransferFromFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "TransactionExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroInput",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroRecipient",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "srcToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "dstToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "srcTokenAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "dstTokenAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fees",
        type: "uint256",
      },
    ],
    name: "Trade",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "feeCollector",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISwapExecutor",
        name: "executor",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
        ],
        internalType: "struct ISwapFacade.MinReturnInfo[]",
        name: "minReturns",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "exactAmount",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "recipient",
            type: "address",
          },
        ],
        internalType: "struct ISwapExecutor.TokenTransferInfo[]",
        name: "targetTokenTransferInfos",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "sourceToken",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "tokenRatio",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "target",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "params",
                type: "uint256",
              },
            ],
            internalType: "struct ISwapExecutor.TargetSwapDescription[]",
            name: "swaps",
            type: "tuple[]",
          },
        ],
        internalType: "struct ISwapExecutor.SwapDescription[]",
        name: "swapDescriptions",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "permit",
        type: "bytes",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256[]",
        name: "swappedAmounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "destination",
        type: "address",
      },
    ],
    name: "sweep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newFeeCollector",
        type: "address",
      },
    ],
    name: "updateFeeCollector",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620017bf380380620017bf833981016040819052620000349162000107565b6200003f336200008d565b6001600160a01b03811662000067576040516303988b8160e61b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b039290921691909117905562000139565b600180546001600160a01b0319169055620000b481620000b7602090811b6200090417901c565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200011a57600080fd5b81516001600160a01b03811681146200013257600080fd5b9392505050565b61167680620001496000396000f3fe6080604052600436106100865760003560e01c8063c415b95c11610059578063c415b95c1461010e578063d2c35ce81461012e578063e30c39781461014e578063f0d7bb941461016c578063f2fde38b1461018c57600080fd5b8063715018a61461008b57806379ba5097146100a25780638da5cb5b146100b7578063b8dc491b146100ee575b600080fd5b34801561009757600080fd5b506100a06101ac565b005b3480156100ae57600080fd5b506100a06101c0565b3480156100c357600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100fa57600080fd5b506100a06101093660046110ca565b61023f565b34801561011a57600080fd5b506002546100d1906001600160a01b031681565b34801561013a57600080fd5b506100a0610149366004611103565b6102ca565b34801561015a57600080fd5b506001546001600160a01b03166100d1565b61017f61017a36600461120a565b61031b565b6040516100e591906112f9565b34801561019857600080fd5b506100a06101a7366004611103565b610893565b6101b4610954565b6101be60006109ae565b565b60015433906001600160a01b031681146102335760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b61023c816109ae565b50565b610247610954565b6040516370a0823160e01b81523060048201526102c69082906001600160a01b038516906370a0823190602401602060405180830381865afa158015610291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b5919061133d565b6001600160a01b03851691906109c7565b5050565b6102d2610954565b6001600160a01b0381166102f9576040516303988b8160e61b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6060428610156103475760405163300249d760e01b81526004810187905242602482015260440161022a565b8a6000036103685760405163af458c0760e01b815260040160405180910390fd5b60005b878110156103d857600089898381811061038757610387611356565b905060600201604001602081019061039f9190611103565b6001600160a01b0316036103c65760405163d27b444360e01b815260040160405180910390fd5b806103d081611382565b91505061036b565b5060008490036103fb5760405163b494d17560e01b815260040160405180910390fd5b600034156104ad578b34146104235760405163178ee1ed60e21b815260040160405180910390fd5b82156104425760405163283e650d60e01b815260040160405180910390fd5b61047d8686600081811061045857610458611356565b905060200281019061046a919061139b565b610478906020810190611103565b6109fc565b61049a57604051632b27b8bb60e01b815260040160405180910390fd5b506002546001600160a01b031631610694565b8b868660008181106104c1576104c1611356565b90506020028101906104d3919061139b565b6104e1906020810190611103565b6001600160a01b03166370a082318f6040518263ffffffff1660e01b815260040161051b91906001600160a01b0391909116815260200190565b602060405180830381865afa158015610538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055c919061133d565b10156105f15782156105a7576105a58686600081811061057e5761057e611356565b9050602002810190610590919061139b565b61059e906020810190611103565b8585610a36565b505b6105f1338e8e898960008181106105c0576105c0611356565b90506020028101906105d2919061139b565b6105e0906020810190611103565b6001600160a01b0316929190610a4d565b8585600081811061060457610604611356565b9050602002810190610616919061139b565b610624906020810190611103565b6002546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610691919061133d565b90505b6106a38d8c8c8c8c8b8b610ad1565b915034156106ca576002546106c39082906001600160a01b0316316113bb565b9050610778565b80868660008181106106de576106de611356565b90506020028101906106f0919061139b565b6106fe906020810190611103565b6002546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b919061133d565b61077591906113bb565b90505b815160011461079a57604051636676835160e01b815260040160405180910390fd5b7f4a2af5744adbfadba82ab831aea212bad92f5a70fef2079562044f423e99985133878760008181106107cf576107cf611356565b90506020028101906107e1919061139b565b6107ef906020810190611103565b8d8d600081811061080257610802611356565b6108189260206060909202019081019150611103565b8f8660008151811061082c5761082c611356565b60200260200101518660405161087b969594939291906001600160a01b03968716815294861660208601529290941660408401526060830152608082019290925260a081019190915260c00190565b60405180910390a1509b9a5050505050505050505050565b61089b610954565b600180546001600160a01b0383166001600160a01b031990911681179091556108cc6000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146101be5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161022a565b600180546001600160a01b031916905561023c81610904565b6109da8363a9059cbb60e01b8484610d89565b6109f75760405163fb7f507960e01b815260040160405180910390fd5b505050565b60006001600160a01b0382161580610a3057506001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b92915050565b6000610a458433308686610ddc565b949350505050565b60006323b872dd60e01b905060006040518281528560048201528460248201528360448201526020600060648360008b5af19150508015610aab573d8015610aa157600160005114601f3d11169150610aa9565b6000873b1191505b505b80610ac95760405163f405907160e01b815260040160405180910390fd5b505050505050565b606060008667ffffffffffffffff811115610aee57610aee6113ce565b604051908082528060200260200182016040528015610b17578160200160208202803683370190505b50905060005b87811015610bb857610b89898983818110610b3a57610b3a611356565b9050606002016040016020810190610b529190611103565b8a8a84818110610b6457610b64611356565b610b7a9260206060909202019081019150611103565b6001600160a01b031690611023565b828281518110610b9b57610b9b611356565b602090810291909101015280610bb081611382565b915050610b1d565b506040516392b1274560e01b81526001600160a01b038a16906392b12745903490610bed908a908a908a908a9060040161140d565b6000604051808303818588803b158015610c0657600080fd5b505af1158015610c1a573d6000803e3d6000fd5b50600093508a9250505067ffffffffffffffff811115610c3c57610c3c6113ce565b604051908082528060200260200182016040528015610c65578160200160208202803683370190505b50905060005b88811015610d7b576000838281518110610c8757610c87611356565b602002602001015190506000610cd28c8c85818110610ca857610ca8611356565b9050606002016040016020810190610cc09190611103565b8d8d86818110610b6457610b64611356565b90506000610ce083836113bb565b90508c8c85818110610cf457610cf4611356565b90506060020160200135811015610d4657808d8d86818110610d1857610d18611356565b9050606002016020013560405163321f864360e11b815260040161022a929190918252602082015260400190565b80858581518110610d5957610d59611356565b6020026020010181815250505050508080610d7390611382565b915050610c6b565b509998505050505050505050565b60006040518481528360048201528260248201526020600060448360008a5af19150508015610a45573d8015610dcb57600160005114601f3d11169150610dd3565b6000863b1191505b50949350505050565b60405160009063d505accf60e01b906323f2ebc360e21b906302b67b5760e41b908560648114610e3f5760488114610ea35760e08114610f11576101008114610f2d5760608114610f4a576101608114610fed57636827585760e01b8252600482fd5b848252896004830152886024830152602088013560e01c604489013560208a60448601376001820360648501528060ff1c601b016084850152602060248b0160a48601376001600160ff1b031660c48401525060008060e484828f5af19550611015565b838252896004830152886024830152600488013560e01c6028890135893560e01c6044850152600182036064850152600160848501528060ff1c601b0160a4850152602060088b0160c48601376001600160ff1b031660e48401525060008061010484828f5af19550611015565b8482528688600484013760008060e48460008f5af19550611015565b838252868860048401376000806101048460008f5af19550611015565b8282528960048301528a602483015260148860508401376001601489013560e01c0365ffffffffffff166064830152601888013560e01c60848301528860a48301526001601c89013560e01c0365ffffffffffff1660c483015261010060e4830152604061010483015260208089016101248401376020604089016101448401376000806101648460006e22d473030f116ddee9f6b43ac78ba35af19550611015565b828252868860048401376000806101648460006e22d473030f116ddee9f6b43ac78ba35af195505b505050505095945050505050565b600061102e836109fc565b1561104457506001600160a01b03811631610a30565b826001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381865afa158015611096573d6000803e3d6000fd5b505050506040513d60208110156110ac57600080fd5b50519392505050565b6001600160a01b038116811461023c57600080fd5b600080604083850312156110dd57600080fd5b82356110e8816110b5565b915060208301356110f8816110b5565b809150509250929050565b60006020828403121561111557600080fd5b8135611120816110b5565b9392505050565b8035611132816110b5565b919050565b60008083601f84011261114957600080fd5b50813567ffffffffffffffff81111561116157600080fd5b60208301915083602060608302850101111561117c57600080fd5b9250929050565b60008083601f84011261119557600080fd5b50813567ffffffffffffffff8111156111ad57600080fd5b6020830191508360208260051b850101111561117c57600080fd5b60008083601f8401126111da57600080fd5b50813567ffffffffffffffff8111156111f257600080fd5b60208301915083602082850101111561117c57600080fd5b600080600080600080600080600080600060e08c8e03121561122b57600080fd5b6112348c611127565b9a5060208c0135995067ffffffffffffffff8060408e0135111561125757600080fd5b6112678e60408f01358f01611137565b909a50985060608d013581101561127d57600080fd5b61128d8e60608f01358f01611137565b909850965060808d0135955060a08d01358110156112aa57600080fd5b6112ba8e60a08f01358f01611183565b909550935060c08d01358110156112d057600080fd5b506112e18d60c08e01358e016111c8565b81935080925050509295989b509295989b9093969950565b6020808252825182820181905260009190848201906040850190845b8181101561133157835183529284019291840191600101611315565b50909695505050505050565b60006020828403121561134f57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016113945761139461136c565b5060010190565b60008235603e198336030181126113b157600080fd5b9190910192915050565b81810381811115610a3057610a3061136c565b634e487b7160e01b600052604160045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040808252810184905260006060820186825b878110156114765761143282356110b5565b6001600160a01b038235811684526020808401359085015261145760408401356110b5565b6040838101359091169084015260609283019290910190600101611420565b505082810360208401528084825260208201905060208560051b8301018660005b8781101561163157848303601f19018452603e19368a900381018335126114bd57600080fd5b898335016114cb81356110b5565b6001600160a01b03813581168652601e1936839003016020830135126114f057600080fd5b816020830135019150813567ffffffffffffffff8082111561151157600080fd5b8160051b360360208501131561152657600080fd5b604060208901526040880182815260608901905060608360051b8a0101602086016000609e19883603015b8682101561160d57605f198d85030185528083351261156f57600080fd5b888335016020810135855261158760408201356110b5565b88604082013516602086015260608101358b8236030181126115a857600080fd5b8101604081019060200135888111156115c057600080fd5b8036038213156115cf57600080fd5b608060408801526115e46080880182846113e4565b915050608082013560608701528095505050602083019250602085019450600182019150611551565b50505080995050505050505050602082019150602084019350600181019050611497565b5090999850505050505050505056fea26469706673582212203eb045697eb7920001ef411587efa4c3a72293336d02227a14586d08f25ec6b164736f6c63430008120033";

type SwapFacadeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapFacadeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapFacade__factory extends ContractFactory {
  constructor(...args: SwapFacadeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    feeCollector_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(feeCollector_, overrides || {});
  }
  override deploy(
    feeCollector_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(feeCollector_, overrides || {}) as Promise<
      SwapFacade & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SwapFacade__factory {
    return super.connect(runner) as SwapFacade__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapFacadeInterface {
    return new Interface(_abi) as SwapFacadeInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SwapFacade {
    return new Contract(address, _abi, runner) as unknown as SwapFacade;
  }
}
