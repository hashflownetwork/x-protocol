/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ISwapFacade {
  export type MinReturnInfoStruct = {
    token: AddressLike;
    amount: BigNumberish;
    recipient: AddressLike;
  };

  export type MinReturnInfoStructOutput = [
    token: string,
    amount: bigint,
    recipient: string
  ] & { token: string; amount: bigint; recipient: string };
}

export declare namespace ISwapExecutor {
  export type TokenTransferInfoStruct = {
    token: AddressLike;
    exactAmount: BigNumberish;
    recipient: AddressLike;
  };

  export type TokenTransferInfoStructOutput = [
    token: string,
    exactAmount: bigint,
    recipient: string
  ] & { token: string; exactAmount: bigint; recipient: string };

  export type TargetSwapDescriptionStruct = {
    tokenRatio: BigNumberish;
    target: AddressLike;
    data: BytesLike;
    params: BigNumberish;
  };

  export type TargetSwapDescriptionStructOutput = [
    tokenRatio: bigint,
    target: string,
    data: string,
    params: bigint
  ] & { tokenRatio: bigint; target: string; data: string; params: bigint };

  export type SwapDescriptionStruct = {
    sourceToken: AddressLike;
    swaps: ISwapExecutor.TargetSwapDescriptionStruct[];
  };

  export type SwapDescriptionStructOutput = [
    sourceToken: string,
    swaps: ISwapExecutor.TargetSwapDescriptionStructOutput[]
  ] & {
    sourceToken: string;
    swaps: ISwapExecutor.TargetSwapDescriptionStructOutput[];
  };
}

export interface ISwapFacadeInterface extends Interface {
  getFunction(nameOrSignature: "swap"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;

  encodeFunctionData(
    functionFragment: "swap",
    values: [
      AddressLike,
      BigNumberish,
      ISwapFacade.MinReturnInfoStruct[],
      ISwapExecutor.TokenTransferInfoStruct[],
      BigNumberish,
      ISwapExecutor.SwapDescriptionStruct[],
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
}

export namespace TradeEvent {
  export type InputTuple = [
    trader: AddressLike,
    srcToken: AddressLike,
    dstToken: AddressLike,
    srcTokenAmount: BigNumberish,
    dstTokenAmount: BigNumberish,
    fees: BigNumberish
  ];
  export type OutputTuple = [
    trader: string,
    srcToken: string,
    dstToken: string,
    srcTokenAmount: bigint,
    dstTokenAmount: bigint,
    fees: bigint
  ];
  export interface OutputObject {
    trader: string;
    srcToken: string;
    dstToken: string;
    srcTokenAmount: bigint;
    dstTokenAmount: bigint;
    fees: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISwapFacade extends BaseContract {
  connect(runner?: ContractRunner | null): ISwapFacade;
  waitForDeployment(): Promise<this>;

  interface: ISwapFacadeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  swap: TypedContractMethod<
    [
      executor: AddressLike,
      amount: BigNumberish,
      minReturns: ISwapFacade.MinReturnInfoStruct[],
      targetTokenTransferInfos: ISwapExecutor.TokenTransferInfoStruct[],
      deadline: BigNumberish,
      swapDescriptions: ISwapExecutor.SwapDescriptionStruct[],
      permit: BytesLike
    ],
    [bigint[]],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      executor: AddressLike,
      amount: BigNumberish,
      minReturns: ISwapFacade.MinReturnInfoStruct[],
      targetTokenTransferInfos: ISwapExecutor.TokenTransferInfoStruct[],
      deadline: BigNumberish,
      swapDescriptions: ISwapExecutor.SwapDescriptionStruct[],
      permit: BytesLike
    ],
    [bigint[]],
    "payable"
  >;

  getEvent(
    key: "Trade"
  ): TypedContractEvent<
    TradeEvent.InputTuple,
    TradeEvent.OutputTuple,
    TradeEvent.OutputObject
  >;

  filters: {
    "Trade(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
    Trade: TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
  };
}
