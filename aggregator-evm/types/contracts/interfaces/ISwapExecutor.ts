/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ISwapExecutor {
  export type TokenTransferInfoStruct = {
    token: AddressLike;
    exactAmount: BigNumberish;
    recipient: AddressLike;
  };

  export type TokenTransferInfoStructOutput = [
    token: string,
    exactAmount: bigint,
    recipient: string
  ] & { token: string; exactAmount: bigint; recipient: string };

  export type TargetSwapDescriptionStruct = {
    tokenRatio: BigNumberish;
    target: AddressLike;
    data: BytesLike;
    params: BigNumberish;
  };

  export type TargetSwapDescriptionStructOutput = [
    tokenRatio: bigint,
    target: string,
    data: string,
    params: bigint
  ] & { tokenRatio: bigint; target: string; data: string; params: bigint };

  export type SwapDescriptionStruct = {
    sourceToken: AddressLike;
    swaps: ISwapExecutor.TargetSwapDescriptionStruct[];
  };

  export type SwapDescriptionStructOutput = [
    sourceToken: string,
    swaps: ISwapExecutor.TargetSwapDescriptionStructOutput[]
  ] & {
    sourceToken: string;
    swaps: ISwapExecutor.TargetSwapDescriptionStructOutput[];
  };
}

export interface ISwapExecutorInterface extends Interface {
  getFunction(nameOrSignature: "executeSwap"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeSwap",
    values: [
      ISwapExecutor.TokenTransferInfoStruct[],
      ISwapExecutor.SwapDescriptionStruct[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeSwap",
    data: BytesLike
  ): Result;
}

export interface ISwapExecutor extends BaseContract {
  connect(runner?: ContractRunner | null): ISwapExecutor;
  waitForDeployment(): Promise<this>;

  interface: ISwapExecutorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeSwap: TypedContractMethod<
    [
      targetTokenTransferInfos: ISwapExecutor.TokenTransferInfoStruct[],
      swapDescriptions: ISwapExecutor.SwapDescriptionStruct[]
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeSwap"
  ): TypedContractMethod<
    [
      targetTokenTransferInfos: ISwapExecutor.TokenTransferInfoStruct[],
      swapDescriptions: ISwapExecutor.SwapDescriptionStruct[]
    ],
    [void],
    "payable"
  >;

  filters: {};
}
